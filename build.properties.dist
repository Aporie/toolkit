# Subsite configuration
# ---------------------

# The site name.
subsite.name = My Project
subsite.id = myproject
subsite.install.modules = myproject_core
subsite.url.production =
subsite.url.playground =
subsite.url.acceptance =


# Subsite clone configuration.
#-----------------------------

# Project database url username is used for .htaccess to file download url. Use only
# within build.properties.local if needed. Never commit credentials on github.
subsite.database.url.htaccess.username =

# Project database url username is used for .htaccess to file download url. Use only
# within build.properties.local if needed. Never commit credentials on github.
subsite.database.url.htaccess.password =

# Project database url. No http url scheme should be defined in this url! If
# you want developers to use the same database this should be added to the projects
# build.properties file.
subsite.database.url = webgate.ec.europa.eu/fpfis/files-for/automate_dumps/${subsite.id}/

# Project database filename.  If you want developers to use the same database this
# should be added to the projects build.properties file. The file has to be
# compressed in .gz format. Thus ending in .sql.gz.
# TODO: Put the name here as it has a general name now."
subsite.database.filename =

# The information of the project reference repository.
subsite.reference.repository = https://github.com/ec-europa/myproject-reference
subsite.reference.branch = master
subsite.reference.remote = reference

# Development configuration
# ---------------------------------------

# Development modules to download, enable and its directory.
devel.mdls.download = devel maillog stage_file_proxy
devel.mdls.enable = devel context field_ui maillog simpletest stage_file_proxy views_ui
devel.mdls.dir = devel

# Variables to set for cloning production.
devel.vars.error_level = 2
devel.vars.views_ui_show_sql_query = 1
devel.vars.views_ui_show_performance_statistics = 1
devel.vars.views_show_additional_queries = 1
devel.vars.stage_file_proxy_origin = https://ec.europa.eu/${subsite.id}
devel.vars.stage_file_proxy_origin_dir = sites/${subsite.id}/files
devel.vars.stage_file_proxy_hotlink = 1


# Drupal configuration
# --------------------

# Database settings.
drupal.db.type = mysql
drupal.db.name = db_name
drupal.db.user = root
drupal.db.password =
drupal.db.host = mysql
drupal.db.port = 3306
drupal.db.url = ${drupal.db.type}://${drupal.db.user}:${drupal.db.password}@${drupal.db.host}:${drupal.db.port}/${drupal.db.name}

# Solr env url. Either d7_apachesolr or d7_search_api.
drupal.solr.activate = 1
drupal.solr.env.url = http://solr:8983/solr/d7_apachesolr

# Admin user
drupal.admin.username = admin
drupal.admin.password = pass
drupal.admin.email = ${drupal.admin.username}@example.com

# The location of the .htaccess file in the Drupal root folder and text to append.
drupal.htaccess.path = ${project.build.platform.dir}/.htaccess
drupal.htaccess.append.text =

# The Drupal core version.
drupal.core.version = 7.x


# Platform configuration
# ----------------------

# The install profile to use. Either multisite_drupal_standard or
# multisite_drupal_communities.
platform.profile.name = multisite_drupal_standard

# The branch, tag or commit to use, eg. 'master', 'develop', '2.1.56',
# '7df0d254b'. It is possible to define only major and/or minor to get the
# latest reference tag. For example 2.4 which will check online for the latest
# available build package. For most projects you would want to follow 'master'
# so that you always have the latest version.
platform.package.version = 2.4

# The provider that hosts the platform repository.
platform.package.provider = git-hub

# The name of the platform repository.
platform.package.repository = ec-europa/platform-dev

# Activate vanilla database caching to skip drush site-install.
platform.package.database = 0

# The path to the downloaded package. This is named 'deploy-package-${platform.package.reference}.tar.gz'.
platform.package.tarball = deploy-package-${platform.package.reference}.tar.gz

# The ContinuousPHP token. Leave this empty for open source projects. Note that
# the NextEuropa platform is open source.
## OPENSOURCE REPLICATE: For starterkit and platform.
platform.package.token =


# Paths
# -----

# Paths to executables.
composer.bin = composer.phar
drush.bin = ${ssk.bin}/drush
git.bin = git
phing.bin = ${ssk.bin}/phing

# Build location.
phing.subsite.src.dir = ${ssk.root}/src

# Curl progress type, empty for progress meter, # for progress bar..
project.curl.progress = #

# Temporary folder.
project.tmp.dir = ${project.basedir}/tmp

# Temporary resources. These are generated on the fly when building.
project.tmp.devel.make = ${project.tmp.dir}/devel.make

# Project makefile.
project.make = ${project.resources.dir}/site.make

# Local resources.
project.resources.dir = ${project.basedir}/resources
project.resources.dir.lib = ${project.basedir}/lib
project.resources.dir.features = ${project.resources.dir.lib}/features
project.resources.dir.modules = ${project.resources.dir.lib}/modules
project.resources.dir.profiles = ${project.resources.dir.lib}/profiles
project.resources.dir.source = ${project.resources.dir.lib}/src
project.resources.dir.tests = ${project.basedir}/tests
project.resources.dir.themes = ${project.resources.dir.lib}/themes
project.resources.favicon.ico = ${project.resources.dir}/favicon.ico
project.resources.composer.json = ${project.resources.dir}/composer.json
project.resources.composer.lock = ${project.resources.dir}/composer.lock

project.build.platform.name = platform
project.build.platform.dir = ${project.basedir}/${project.build.platform.name}
project.build.platform.dir.settings = ${project.build.platform.dir.sites}/default
project.build.platform.dir.sites = ${project.build.platform.dir}/sites
project.build.platform.dir.profiles = ${project.build.platform.dir}/profiles
project.build.platform.dir.profile = ${project.build.platform.dir.profiles}/${platform.profile.name}
project.build.platform.composer.json = ${project.build.platform.dir}/composer.json
project.build.platform.composer.lock = ${project.build.platform.dir}/composer.lock
project.build.platform.favicon.ico = ${project.build.platform.dir}/favicon.ico

project.build.subsite.name = ${project.id}
project.build.subsite.dir = ${project.build.platform.dir.sites}/${project.build.subsite.name}
project.build.subsite.dir.files = ${project.build.subsite.dir}/files
project.build.subsite.dir.tmp = ${project.build.subsite.dir}/tmp
project.build.subsite.dir.source = ${project.build.subsite.dir}/src
project.build.subsite.dir.libraries = ${project.build.subsite.dir}/libraries
project.build.subsite.dir.modules = ${project.build.subsite.dir}/modules
project.build.subsite.dir.modules.contrib = ${project.build.subsite.dir.modules}/contrib
project.build.subsite.dir.modules.custom = ${project.build.subsite.dir.modules}/custom
project.build.subsite.dir.modules.features = ${project.build.subsite.dir.modules}/features
project.build.subsite.dir.themes = ${project.build.subsite.dir}/themes
project.build.subsite.composer.json = ${project.build.subsite.dir}/composer.json
project.build.subsite.composer.lock = ${project.build.subsite.dir}/composer.lock

# Files and directories inside the distribution build.
project.build.dist.name = build
project.build.dist.dir = ${project.basedir}/${project.build.dist.name}
project.build.dist.dir.modules = ${project.build.dist.dir}/modules
project.build.dist.dir.modules.custom = ${project.build.dist.dir.modules}/custom
project.build.dist.dir.modules.features = ${project.build.dist.dir.modules}/features
project.build.dist.dir.source = ${project.build.dist.dir}/src
project.build.dist.dir.themes = ${project.build.dist.dir}/themes
project.build.dist.composer.json = ${project.build.dist.dir}/composer.json
project.build.dist.composer.lock = ${project.build.dist.dir}/composer.lock


# Rebuild configuration
# ---------------------

# Automatically rebuild without asking confirmation.
project.rebuild.auto = 0

# Rebuild backup destination.
project.rebuild.backup.destination = ${project.tmp.dir}/backup-site

# Semicolon separated list of folders to backup.
project.rebuild.backup.folders = ${project.build.files.dir};${project.build.tmp.dir}

# Semicolon separated list of files to backup.
project.rebuild.backup.files = ${project.build.settings.dir}/settings.php


# Host configuration
# ------------------

# The location of the webserver docroot. Used for testing on CI infrastructure.
## GOOD
server.docroot = /var/www


# Debugging configuration
# ---------------------------------------
## GOOD

# Verbosity of drush commands. Set to TRUE to be verbose.
drush.verbose = FALSE

# Activate or de-activate terminal color.
drush.color = 1


# AWS SDK
# -------
## REMOVE ALL AMWS

aws.region = eu-west-1


# AWS Cloud Formation
# -------------------
cf.template = single-server


# AWS CodeDeploy
# --------------
deploy.serviceRole = arn:aws:iam::918396081007:role/CodeDeploy


# Build defaults
# --------------

# Whether or not to stop executing the build if a directory cannot be copied.
copy.path.haltonerror = true


# Shared paths
# ------------

# Global share location.
# This can be a volume mount from docker or a local path outside
# of your project. Correct configuration will speed up the build
# process immensly. CI can also mount these locations for builds.
# TODO: Implement a cache clear command, to start fresh.

share.path = /tmp
share.name = share
share.path.global = ${share.path}/${share.name}

# Main share locations.
share.path.platform = ${share.path.global}/platform
share.path.subsites = ${share.path.global}/subsites
share.path.composer = ${share.path.global}/composer

# Platform packages.
share.path.platform.packages = ${share.path.platform}/packages
share.path.platform.packages.deploy = ${share.path.platform.packages}/deploy
share.path.platform.packages.test = ${share.path.platform.packages}/test
share.path.platform.packages.database = ${share.path.platform.packages}/database

# Subsites packages.
share.path.subsites.packages = ${share.path.subsites}/packages
share.path.subsites.packages.deploy = ${share.path.subsites.packages}/deploy
share.path.subsites.packages.test = ${share.path.subsites.packages}/test
share.path.subsites.packages.database = ${share.path.subsites.packages}/database

# Composer shared packages.
share.path.composer.packages = ${share.path.composer}/packages
share.path.composer.packages.shared = ${share.path.composer.packages}/shared


# Docker
# ------

# Default project id.
## UPDATE TO BRANCHES?
docker.project.id = environment


# Composer hook phingcall target lists. Space separated only.
# -----------------------------------------------------------
## GOOD
composer.hook.post.install = starterkit-init
composer.hook.post.update =
composer.hook.pre.install =
composer.hook.pre.update =

# Flickr configuration
# --------------------

# A valid API key & secret used by the behat tests
flickr.key = foobar
flickr.secret = bas

# Integration configuration
# -------------------------

# Port on which the mocked integration server used by the behat tests will listen.
integration.server.port = 8888

# Varnish configuration
# -------------------------

# Port on which the mocked Varnish server used by the behat tests will listen.
varnish.server.port = 8888

# Drush Context configuration
# ---------------------------
drush.db.dump = ${project.build.platform.dir}/dump.sql

