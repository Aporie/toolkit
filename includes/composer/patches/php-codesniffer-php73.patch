diff --git a/CodeSniffer.php b/CodeSniffer.php
index 3c2f47309..26bd79472 100644
--- a/CodeSniffer.php
+++ b/CodeSniffer.php
@@ -409,7 +409,7 @@ class PHP_CodeSniffer
                 // They specified the tokenizer too.
                 list($ext, $tokenizer) = explode('/', $ext);
                 $newExtensions[$ext]   = strtoupper($tokenizer);
-                continue;
+                continue 2;
             }
 
             if (isset($this->allowedFileExtensions[$ext]) === true) {
@@ -657,7 +657,7 @@ class PHP_CodeSniffer
                 || PHP_CODESNIFFER_INTERACTIVE === true
                 || $showProgress === false
             ) {
-                continue;
+                continue 2;
             }
 
             // Show progress information.
@@ -753,7 +753,7 @@ class PHP_CodeSniffer
         // Process custom sniff config settings.
         foreach ($ruleset->{'config'} as $config) {
             if ($this->_shouldProcessElement($config) === false) {
-                continue;
+                continue 2;
             }
 
             $this->setConfigData((string) $config['name'], (string) $config['value'], true);
@@ -767,7 +767,7 @@ class PHP_CodeSniffer
             if (isset($rule['ref']) === false
                 || $this->_shouldProcessElement($rule) === false
             ) {
-                continue;
+                continue 2;
             }
 
             if (PHP_CODESNIFFER_VERBOSITY > 1) {
@@ -783,7 +783,7 @@ class PHP_CodeSniffer
             if (isset($rule->exclude) === true) {
                 foreach ($rule->exclude as $exclude) {
                     if ($this->_shouldProcessElement($exclude) === false) {
-                        continue;
+                        continue 2;
                     }
 
                     if (PHP_CODESNIFFER_VERBOSITY > 1) {
@@ -816,7 +816,7 @@ class PHP_CodeSniffer
         $cliArgs = array();
         foreach ($ruleset->{'arg'} as $arg) {
             if ($this->_shouldProcessElement($arg) === false) {
-                continue;
+                continue 2;
             }
 
             if (isset($arg['name']) === true) {
@@ -839,11 +839,11 @@ class PHP_CodeSniffer
         // Set custom php ini values as CLI args.
         foreach ($ruleset->{'ini'} as $arg) {
             if ($this->_shouldProcessElement($arg) === false) {
-                continue;
+                continue 2;
             }
 
             if (isset($arg['name']) === false) {
-                continue;
+                continue 2;
             }
 
             $name      = (string) $arg['name'];
@@ -896,7 +896,7 @@ class PHP_CodeSniffer
         // Process custom ignore pattern rules.
         foreach ($ruleset->{'exclude-pattern'} as $pattern) {
             if ($this->_shouldProcessElement($pattern) === false) {
-                continue;
+                continue 2;
             }
 
             if (isset($pattern['type']) === false) {
@@ -925,7 +925,7 @@ class PHP_CodeSniffer
         $files = array();
         foreach ($includedSniffs as $sniff) {
             if (in_array($sniff, $excludedSniffs) === true) {
-                continue;
+                continue 2;
             } else {
                 $files[] = self::realpath($sniff);
             }
@@ -964,18 +964,18 @@ class PHP_CodeSniffer
 
             // Skip hidden files.
             if (substr($filename, 0, 1) === '.') {
-                continue;
+                continue 2;
             }
 
             // We are only interested in PHP and sniff files.
             $fileParts = explode('.', $filename);
             if (array_pop($fileParts) !== 'php') {
-                continue;
+                continue 2;
             }
 
             $basename = basename($filename, '.php');
             if (substr($basename, -5) !== 'Sniff') {
-                continue;
+                continue 2;
             }
 
             $path = $file->getPathname();
@@ -985,7 +985,7 @@ class PHP_CodeSniffer
             // before, valid example:
             // /home/foo/.composer/vendor/drupal/coder/coder_sniffer/Drupal/Sniffs/...
             if (strpos($path, DIRECTORY_SEPARATOR.'.', $dirLen) !== false) {
-                continue;
+                continue 2;
             }
 
             if (PHP_CODESNIFFER_VERBOSITY > 1) {
@@ -1121,7 +1121,7 @@ class PHP_CodeSniffer
                     // and seeing if it is in there.
                     foreach (self::$rulesetDirs as $dir) {
                         if (strtolower(basename($dir)) !== strtolower($stdName)) {
-                            continue;
+                            continue 2;
                         }
 
                         $newRef = self::realpath($dir.$path);
@@ -1248,7 +1248,7 @@ class PHP_CodeSniffer
         ) {
             foreach ($rule->properties->property as $prop) {
                 if ($this->_shouldProcessElement($prop) === false) {
-                    continue;
+                    continue 2;
                 }
 
                 if (isset($this->ruleset[$code]) === false) {
@@ -1294,7 +1294,7 @@ class PHP_CodeSniffer
         // Ignore patterns.
         foreach ($rule->{'exclude-pattern'} as $pattern) {
             if ($this->_shouldProcessElement($pattern) === false) {
-                continue;
+                continue 2;
             }
 
             if (isset($this->ignorePatterns[$code]) === false) {
@@ -1373,12 +1373,12 @@ class PHP_CodeSniffer
             // so we can determine what the class will be called.
             $sniffPos = strrpos($file, DIRECTORY_SEPARATOR.'Sniffs'.DIRECTORY_SEPARATOR);
             if ($sniffPos === false) {
-                continue;
+                continue 2;
             }
 
             $slashPos = strrpos(substr($file, 0, $sniffPos), DIRECTORY_SEPARATOR);
             if ($slashPos === false) {
-                continue;
+                continue 2;
             }
 
             $className = substr($file, ($slashPos + 1));
@@ -1395,7 +1395,7 @@ class PHP_CodeSniffer
             if (empty($restrictions) === false
                 && in_array(strtolower($className), $restrictions) === false
             ) {
-                continue;
+                continue 2;
             }
 
             // If they have specified a list of sniffs to exclude, check
@@ -1403,7 +1403,7 @@ class PHP_CodeSniffer
             if (empty($exclusions) === false
                 && in_array(strtolower($className), $exclusions) === true
             ) {
-                continue;
+                continue 2;
             }
 
             include_once $file;
@@ -1419,7 +1419,7 @@ class PHP_CodeSniffer
             // Skip abstract classes.
             $reflection = new ReflectionClass($className);
             if ($reflection->isAbstract() === true) {
-                continue;
+                continue 2;
             }
 
             $listeners[$className] = $className;
@@ -1587,22 +1587,22 @@ class PHP_CodeSniffer
                     // Check if the file exists after all symlinks are resolved.
                     $filePath = self::realpath($file->getPathname());
                     if ($filePath === false) {
-                        continue;
+                        continue 2;
                     }
 
                     if (is_dir($filePath) === true) {
-                        continue;
+                        continue 2;
                     }
 
                     if ($this->shouldProcessFile($file->getPathname(), $path) === false) {
-                        continue;
+                        continue 2;
                     }
 
                     $files[] = $file->getPathname();
                 }//end foreach
             } else {
                 if ($this->shouldIgnoreFile($path, dirname($path)) === true) {
-                    continue;
+                    continue 2;
                 }
 
                 $files[] = $path;
@@ -1678,7 +1678,7 @@ class PHP_CodeSniffer
         foreach ($this->ignorePatterns as $pattern => $type) {
             if (is_array($type) === true) {
                 // A sniff specific ignore pattern.
-                continue;
+                continue 2;
             }
 
             // Maintains backwards compatibility in case the ignore pattern does
@@ -1824,7 +1824,7 @@ class PHP_CodeSniffer
         while ($numErrors !== 0) {
             $numErrors = ($phpcsFile->getErrorCount() + $phpcsFile->getWarningCount());
             if ($numErrors === 0) {
-                continue;
+                continue 2;
             }
 
             $reportClass = $this->reporting->factory('full');
@@ -2073,7 +2073,7 @@ class PHP_CodeSniffer
         } else {
             foreach ($nameBits as $bit) {
                 if ($bit === '') {
-                    continue;
+                    continue 2;
                 }
 
                 if ($bit{0} !== strtoupper($bit{0})) {
@@ -2254,7 +2254,7 @@ class PHP_CodeSniffer
 
                     // Ignore the special "Generic" standard.
                     if ($includeGeneric === false && $filename === 'Generic') {
-                        continue;
+                        continue 2;
                     }
 
                     // Valid coding standard dirs include a ruleset.
diff --git a/CodeSniffer/CLI.php b/CodeSniffer/CLI.php
index 29403cf70..43da94d72 100644
--- a/CodeSniffer/CLI.php
+++ b/CodeSniffer/CLI.php
@@ -447,13 +447,13 @@ class PHP_CodeSniffer_CLI
         for ($i = 0; $i < $numArgs; $i++) {
             $arg = $this->_cliArgs[$i];
             if ($arg === '') {
-                continue;
+                continue 2;
             }
 
             if ($arg{0} === '-') {
                 if ($arg === '-' || $arg === '--') {
                     // Empty argument, ignore it.
-                    continue;
+                    continue 2;
                 }
 
                 if ($arg{1} === '-') {
@@ -462,7 +462,7 @@ class PHP_CodeSniffer_CLI
                     $switches = str_split($arg);
                     foreach ($switches as $switch) {
                         if ($switch === '-') {
-                            continue;
+                            continue 2;
                         }
 
                         $this->processShortArgument($switch, $i);
@@ -699,7 +699,7 @@ class PHP_CodeSniffer_CLI
 
                     // Skip empty lines.
                     if ($inputFile === '') {
-                        continue;
+                        continue 2;
                     }
 
                     $realFile = PHP_CodeSniffer::realpath($inputFile);
@@ -826,7 +826,7 @@ class PHP_CodeSniffer_CLI
                 foreach ($ignored as $pattern) {
                     $pattern = trim($pattern);
                     if ($pattern === '') {
-                        continue;
+                        continue 2;
                     }
 
                     $this->values['ignored'][$pattern] = 'absolute';
diff --git a/CodeSniffer/DocGenerators/Generator.php b/CodeSniffer/DocGenerators/Generator.php
index 3834ba388..3adadc029 100644
--- a/CodeSniffer/DocGenerators/Generator.php
+++ b/CodeSniffer/DocGenerators/Generator.php
@@ -145,7 +145,7 @@ abstract class PHP_CodeSniffer_DocGenerators_Generator
                 $parts     = explode('_', $className);
                 $sniffName = $parts[0].'.'.$parts[2].'.'.substr($parts[3], 0, -5);
                 if (in_array($sniffName, $this->_sniffs) === false) {
-                    continue;
+                    continue 2;
                 }
             }
 
diff --git a/CodeSniffer/File.php b/CodeSniffer/File.php
index 62c39799f..8487491b6 100644
--- a/CodeSniffer/File.php
+++ b/CodeSniffer/File.php
@@ -395,7 +395,7 @@ class PHP_CodeSniffer_File
         $class = get_class($listener);
         foreach ($tokens as $token) {
             if (isset($this->_listeners[$token]) === false) {
-                continue;
+                continue 2;
             }
 
             unset($this->_listeners[$token][$class]);
@@ -528,7 +528,7 @@ class PHP_CodeSniffer_File
             }
 
             if (isset($this->_listeners[$token['code']]) === false) {
-                continue;
+                continue 2;
             }
 
             foreach ($this->_listeners[$token['code']] as $listenerData) {
@@ -537,7 +537,7 @@ class PHP_CodeSniffer_File
                     && $listenerIgnoreTo[$listenerData['class']] > $stackPtr)
                 ) {
                     // This sniff is ignoring past this token, or the whole file.
-                    continue;
+                    continue 2;
                 }
 
                 // Make sure this sniff supports the tokenizer
@@ -545,7 +545,7 @@ class PHP_CodeSniffer_File
                 $class = $listenerData['class'];
 
                 if (isset($listenerData['tokenizers'][$this->tokenizerType]) === false) {
-                    continue;
+                    continue 2;
                 }
 
                 // If the file path matches one of our ignore patterns, skip it.
@@ -1763,7 +1763,7 @@ class PHP_CodeSniffer_File
                 }
                 break;
             default:
-                continue;
+                continue 2;
             }//end switch
         }//end for
 
@@ -1857,7 +1857,7 @@ class PHP_CodeSniffer_File
                         echo "\t* already processed, skipping *".PHP_EOL;
                     }
 
-                    continue;
+                    continue 2;
                 }
 
                 $i = self::_recurseScopeMap(
@@ -1988,7 +1988,7 @@ class PHP_CodeSniffer_File
                     }
 
                     $ignore--;
-                    continue;
+                    continue 2;
                 } else if ($tokens[$opener]['code'] === T_OPEN_CURLY_BRACKET
                     && $tokenType !== T_CLOSE_CURLY_BRACKET
                 ) {
@@ -2085,7 +2085,7 @@ class PHP_CodeSniffer_File
                             return $i;
                         }
                     } else {
-                        continue;
+                        continue 2;
                     }//end if
                 }//end if
             }//end if
@@ -2097,7 +2097,7 @@ class PHP_CodeSniffer_File
                         // PHP use keywords are special because they can be
                         // used as blocks but also inline in function definitions.
                         // So if we find them nested inside another opener, just skip them.
-                        continue;
+                        continue 2;
                     }
 
                     if ($tokenType === T_FUNCTION
@@ -2118,7 +2118,7 @@ class PHP_CodeSniffer_File
                             }
 
                             $i = $tokens[$i]['scope_closer'];
-                            continue;
+                            continue 2;
                         }
 
                         $i = self::_recurseScopeMap(
@@ -2131,7 +2131,7 @@ class PHP_CodeSniffer_File
                             $ignore
                         );
 
-                        continue;
+                        continue 2;
                     }//end if
 
                     // Found another opening condition but still haven't
@@ -2182,7 +2182,7 @@ class PHP_CodeSniffer_File
                         $i = $tokens[$i]['scope_closer'];
                     }
 
-                    continue;
+                    continue 2;
                 } else if ($currType === $tokenType
                     && $isShared === false
                     && $opener === null
@@ -2267,7 +2267,7 @@ class PHP_CodeSniffer_File
                         // string offset (e.g., $var{0}).
                         for ($x = ($i - 1); $x > 0; $x--) {
                             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$x]['code']]) === true) {
-                                continue;
+                                continue 2;
                             } else {
                                 // If the first non-whitespace/comment token looks like this
                                 // brace is a string offset, or this brace is mid-way through
@@ -2880,7 +2880,7 @@ class PHP_CodeSniffer_File
                 // If it's null, then there must be no parameters for this
                 // method.
                 if ($currVar === null) {
-                    continue;
+                    continue 2;
                 }
 
                 $vars[$paramCount]            = array();
diff --git a/CodeSniffer/Reporting.php b/CodeSniffer/Reporting.php
index 5cf26d87b..19eb2e864 100644
--- a/CodeSniffer/Reporting.php
+++ b/CodeSniffer/Reporting.php
@@ -319,7 +319,7 @@ class PHP_CodeSniffer_Reporting
         // Merge errors and warnings.
         foreach ($phpcsFile->getErrors() as $line => $lineErrors) {
             if (is_array($lineErrors) === false) {
-                continue;
+                continue 2;
             }
 
             foreach ($lineErrors as $column => $colErrors) {
@@ -342,7 +342,7 @@ class PHP_CodeSniffer_Reporting
 
         foreach ($phpcsFile->getWarnings() as $line => $lineWarnings) {
             if (is_array($lineWarnings) === false) {
-                continue;
+                continue 2;
             }
 
             foreach ($lineWarnings as $column => $colWarnings) {
diff --git a/CodeSniffer/Reports/Info.php b/CodeSniffer/Reports/Info.php
index a599d9c43..06a8a004f 100644
--- a/CodeSniffer/Reports/Info.php
+++ b/CodeSniffer/Reports/Info.php
@@ -140,7 +140,7 @@ class PHP_CodeSniffer_Reports_Info implements PHP_CodeSniffer_Report
             $values = array_reverse($values, true);
             foreach ($values as $value => $count) {
                 if ($value === $winner) {
-                    continue;
+                    continue 2;
                 }
 
                 $percent = round(($count / $totalCount * 100), 2);
diff --git a/CodeSniffer/Reports/VersionControl.php b/CodeSniffer/Reports/VersionControl.php
index 80c51b229..149b840c5 100644
--- a/CodeSniffer/Reports/VersionControl.php
+++ b/CodeSniffer/Reports/VersionControl.php
@@ -132,7 +132,7 @@ abstract class PHP_CodeSniffer_Reports_VersionControl implements PHP_CodeSniffer
             if (isset($this->_authorCache[$author]) === false) {
                 // This author doesn't have any errors.
                 if (PHP_CODESNIFFER_VERBOSITY === 0) {
-                    continue;
+                    continue 2;
                 }
 
                 $this->_authorCache[$author] = 0;
@@ -188,7 +188,7 @@ abstract class PHP_CodeSniffer_Reports_VersionControl implements PHP_CodeSniffer
             if ($showSources === true && isset($this->_sourceCache[$author]) === true) {
                 foreach ($this->_sourceCache[$author] as $source => $sourceData) {
                     if ($source === 'count') {
-                        continue;
+                        continue 2;
                     }
 
                     $maxLength = max($maxLength, (strlen($source) + 9));
@@ -250,7 +250,7 @@ abstract class PHP_CodeSniffer_Reports_VersionControl implements PHP_CodeSniffer
 
                 foreach ($errors as $source => $sourceData) {
                     if ($source === 'count') {
-                        continue;
+                        continue 2;
                     }
 
                     $count = $sourceData['count'];
diff --git a/CodeSniffer/Standards/AbstractPatternSniff.php b/CodeSniffer/Standards/AbstractPatternSniff.php
index a5917317f..3733b7db7 100644
--- a/CodeSniffer/Standards/AbstractPatternSniff.php
+++ b/CodeSniffer/Standards/AbstractPatternSniff.php
@@ -236,7 +236,7 @@ abstract class PHP_CodeSniffer_Standards_AbstractPatternSniff implements PHP_Cod
             $errors = $this->processPattern($patternInfo, $phpcsFile, $stackPtr);
             if ($errors === false) {
                 // The pattern didn't match.
-                continue;
+                continue 2;
             } else if (empty($errors) === true) {
                 // The pattern matched, but there were no errors.
                 break;
@@ -450,7 +450,7 @@ abstract class PHP_CodeSniffer_Standards_AbstractPatternSniff implements PHP_Cod
                         // If we are ignoring comments, check to see if this current
                         // token is a comment. If so skip it.
                         if (isset(PHP_CodeSniffer_Tokens::$commentTokens[$tokens[$stackPtr]['code']]) === true) {
-                            continue;
+                            continue 2;
                         }
 
                         // If the next token is a comment, the we need to skip the
@@ -459,7 +459,7 @@ abstract class PHP_CodeSniffer_Standards_AbstractPatternSniff implements PHP_Cod
                         if (isset($tokens[($stackPtr + 1)]) === true
                             && isset(PHP_CodeSniffer_Tokens::$commentTokens[$tokens[($stackPtr + 1)]['code']]) === true
                         ) {
-                            continue;
+                            continue 2;
                         }
                     }
 
diff --git a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/ForLoopWithTestFunctionCallSniff.php b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/ForLoopWithTestFunctionCallSniff.php
index 9d5c876ab..ce6adbf42 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/ForLoopWithTestFunctionCallSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/ForLoopWithTestFunctionCallSniff.php
@@ -87,11 +87,11 @@ class Generic_Sniffs_CodeAnalysis_ForLoopWithTestFunctionCallSniff implements PH
             }
 
             if ($position < 1) {
-                continue;
+                continue 2;
             } else if ($position > 1) {
                 break;
             } else if ($code !== T_VARIABLE && $code !== T_STRING) {
-                continue;
+                continue 2;
             }
 
             // Find next non empty token, if it is a open curly brace we have a
diff --git a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/JumbledIncrementerSniff.php b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/JumbledIncrementerSniff.php
index 364586e03..5e496c255 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/JumbledIncrementerSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/JumbledIncrementerSniff.php
@@ -93,7 +93,7 @@ class Generic_Sniffs_CodeAnalysis_JumbledIncrementerSniff implements PHP_CodeSni
 
         for (; $start <= $end; ++$start) {
             if ($tokens[$start]['code'] !== T_FOR) {
-                continue;
+                continue 2;
             }
 
             $inner = $this->findIncrementers($tokens, $tokens[$start]);
diff --git a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnconditionalIfStatementSniff.php b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnconditionalIfStatementSniff.php
index 384701605..169bb1ed9 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnconditionalIfStatementSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnconditionalIfStatementSniff.php
@@ -87,7 +87,7 @@ class Generic_Sniffs_CodeAnalysis_UnconditionalIfStatementSniff implements PHP_C
             $code = $tokens[$next]['code'];
 
             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$code]) === true) {
-                continue;
+                continue 2;
             } else if ($code !== T_TRUE && $code !== T_FALSE) {
                 $goodCondition = true;
             }
diff --git a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnusedFunctionParameterSniff.php b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnusedFunctionParameterSniff.php
index f95414a42..5525ef019 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnusedFunctionParameterSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UnusedFunctionParameterSniff.php
@@ -93,7 +93,7 @@ class Generic_Sniffs_CodeAnalysis_UnusedFunctionParameterSniff implements PHP_Co
 
             // Ignorable tokens.
             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$code]) === true) {
-                continue;
+                continue 2;
             }
 
             if ($foundContent === false) {
@@ -156,7 +156,7 @@ class Generic_Sniffs_CodeAnalysis_UnusedFunctionParameterSniff implements PHP_Co
                 $stringTokens = token_get_all(sprintf('<?php %s;?>', $content));
                 foreach ($stringTokens as $stringPtr => $stringToken) {
                     if (is_array($stringToken) === false) {
-                        continue;
+                        continue 2;
                     }
 
                     $varContent = '';
diff --git a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UselessOverridingMethodSniff.php b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UselessOverridingMethodSniff.php
index 27b994d7e..084858040 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UselessOverridingMethodSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UselessOverridingMethodSniff.php
@@ -87,9 +87,9 @@ class Generic_Sniffs_CodeAnalysis_UselessOverridingMethodSniff implements PHP_Co
             $code = $tokens[$next]['code'];
 
             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$code]) === true) {
-                continue;
+                continue 2;
             } else if ($code === T_RETURN) {
-                continue;
+                continue 2;
             }
 
             break;
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Commenting/DocCommentSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Commenting/DocCommentSniff.php
index 2b093afb6..b6e60f608 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Commenting/DocCommentSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Commenting/DocCommentSniff.php
@@ -132,7 +132,7 @@ class Generic_Sniffs_Commenting_DocCommentSniff implements PHP_CodeSniffer_Sniff
                 $phpcsFile->fixer->beginChangeset();
                 for ($i = $stackPtr; $i < $short; $i++) {
                     if ($tokens[$i]['line'] === $tokens[$stackPtr]['line']) {
-                        continue;
+                        continue 2;
                     } else if ($tokens[$i]['line'] === $tokens[$short]['line']) {
                         break;
                     }
@@ -173,7 +173,7 @@ class Generic_Sniffs_Commenting_DocCommentSniff implements PHP_CodeSniffer_Sniff
                     $phpcsFile->fixer->beginChangeset();
                     for ($i = ($shortEnd + 1); $i < $long; $i++) {
                         if ($tokens[$i]['line'] === $tokens[$shortEnd]['line']) {
-                            continue;
+                            continue 2;
                         } else if ($tokens[$i]['line'] === ($tokens[$long]['line'] - 1)) {
                             break;
                         }
@@ -338,7 +338,7 @@ class Generic_Sniffs_Commenting_DocCommentSniff implements PHP_CodeSniffer_Sniff
                     $phpcsFile->addError($error, $tag, 'TagsNotGrouped');
                 }
 
-                continue;
+                continue 2;
             }
 
             $foundTags[$tagName] = true;
diff --git a/CodeSniffer/Standards/Generic/Sniffs/ControlStructures/InlineControlStructureSniff.php b/CodeSniffer/Standards/Generic/Sniffs/ControlStructures/InlineControlStructureSniff.php
index f35323c00..55aa5688c 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/ControlStructures/InlineControlStructureSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/ControlStructures/InlineControlStructureSniff.php
@@ -193,7 +193,7 @@ class Generic_Sniffs_ControlStructures_InlineControlStructureSniff implements PH
                         && ($nextType === T_ELSEIF
                         || $nextType === T_ELSE)
                     ) {
-                        continue;
+                        continue 2;
                     }
 
                     // Account for DO... WHILE conditions.
@@ -217,7 +217,7 @@ class Generic_Sniffs_ControlStructures_InlineControlStructureSniff implements PH
             if (isset($tokens[$end]['parenthesis_closer']) === true) {
                 $end          = $tokens[$end]['parenthesis_closer'];
                 $lastNonEmpty = $end;
-                continue;
+                continue 2;
             }
 
             if ($tokens[$end]['code'] !== T_WHITESPACE) {
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Debug/CSSLintSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Debug/CSSLintSniff.php
index d73fd3db3..ae81cebea 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Debug/CSSLintSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Debug/CSSLintSniff.php
@@ -84,7 +84,7 @@ class Generic_Sniffs_Debug_CSSLintSniff implements PHP_CodeSniffer_Sniff
             );
 
             if ($numMatches === 0) {
-                continue;
+                continue 2;
             }
 
             $line    = (int) $matches[2];
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Debug/ClosureLinterSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Debug/ClosureLinterSniff.php
index 8ef19460a..5b29233f7 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Debug/ClosureLinterSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Debug/ClosureLinterSniff.php
@@ -95,13 +95,13 @@ class Generic_Sniffs_Debug_ClosureLinterSniff implements PHP_CodeSniffer_Sniff
             $matches    = array();
             $numMatches = preg_match('/^(.*):([0-9]+):\(.*?([0-9]+)\)(.*)$/', $finding, $matches);
             if ($numMatches === 0) {
-                continue;
+                continue 2;
             }
 
             // Skip error codes we are ignoring.
             $code = $matches[3];
             if (in_array($code, $this->ignoreCodes) === true) {
-                continue;
+                continue 2;
             }
 
             $line  = (int) $matches[2];
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Debug/JSHintSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Debug/JSHintSniff.php
index 3c7c9b62a..6cb6a3695 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Debug/JSHintSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Debug/JSHintSniff.php
@@ -81,7 +81,7 @@ class Generic_Sniffs_Debug_JSHintSniff implements PHP_CodeSniffer_Sniff
                 $matches    = array();
                 $numMatches = preg_match('/^(.+)\(.+:([0-9]+).*:[0-9]+\)$/', $finding, $matches);
                 if ($numMatches === 0) {
-                    continue;
+                    continue 2;
                 }
 
                 $line    = (int) $matches[2];
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Formatting/DisallowMultipleStatementsSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Formatting/DisallowMultipleStatementsSniff.php
index 258306595..b359da6d6 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Formatting/DisallowMultipleStatementsSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Formatting/DisallowMultipleStatementsSniff.php
@@ -68,7 +68,7 @@ class Generic_Sniffs_Formatting_DisallowMultipleStatementsSniff implements PHP_C
             foreach ($tokens[$stackPtr]['nested_parenthesis'] as $bracket) {
                 if (isset($tokens[$bracket]['parenthesis_owner']) === false) {
                     // Probably a closure sitting inside a function call.
-                    continue;
+                    continue 2;
                 }
 
                 $owner = $tokens[$bracket]['parenthesis_owner'];
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Formatting/MultipleStatementAlignmentSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Formatting/MultipleStatementAlignmentSniff.php
index 8ead992a8..6990f1720 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Formatting/MultipleStatementAlignmentSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Formatting/MultipleStatementAlignmentSniff.php
@@ -150,11 +150,11 @@ class Generic_Sniffs_Formatting_MultipleStatementAlignmentSniff implements PHP_C
                     }
                 }//end if
 
-                continue;
+                continue 2;
             } else if ($assign !== $stackPtr && $tokens[$assign]['line'] === $lastLine) {
                 // Skip multiple assignments on the same line. We only need to
                 // try and align the first assignment.
-                continue;
+                continue 2;
             }//end if
 
             if ($assign !== $stackPtr) {
@@ -262,7 +262,7 @@ class Generic_Sniffs_Formatting_MultipleStatementAlignmentSniff implements PHP_C
         $errorGenerated = false;
         foreach ($assignments as $assignment => $data) {
             if ($data['found'] === $data['expected']) {
-                continue;
+                continue 2;
             }
 
             $expectedText = $data['expected'].' space';
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Functions/CallTimePassByReferenceSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Functions/CallTimePassByReferenceSniff.php
index b949a0dcc..902dd9300 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Functions/CallTimePassByReferenceSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Functions/CallTimePassByReferenceSniff.php
@@ -101,12 +101,12 @@ class Generic_Sniffs_Functions_CallTimePassByReferenceSniff implements PHP_CodeS
 
         while (($nextSeparator = $phpcsFile->findNext($find, ($nextSeparator + 1), $closeBracket)) !== false) {
             if (isset($tokens[$nextSeparator]['nested_parenthesis']) === false) {
-                continue;
+                continue 2;
             }
 
             if ($tokens[$nextSeparator]['code'] === T_OPEN_SHORT_ARRAY) {
                 $nextSeparator = $tokens[$nextSeparator]['bracket_closer'];
-                continue;
+                continue 2;
             }
 
             // Make sure the variable belongs directly to this function call
@@ -114,7 +114,7 @@ class Generic_Sniffs_Functions_CallTimePassByReferenceSniff implements PHP_CodeS
             $brackets    = $tokens[$nextSeparator]['nested_parenthesis'];
             $lastBracket = array_pop($brackets);
             if ($lastBracket !== $closeBracket) {
-                continue;
+                continue 2;
             }
 
             // Checking this: $value = my_function(...[*]$arg...).
@@ -144,7 +144,7 @@ class Generic_Sniffs_Functions_CallTimePassByReferenceSniff implements PHP_CodeS
                     || $tokenCode === T_LNUMBER
                     || isset(PHP_CodeSniffer_Tokens::$assignmentTokens[$tokenCode]) === true
                 ) {
-                    continue;
+                    continue 2;
                 }
 
                 // T_BITWISE_AND represents a pass-by-reference.
diff --git a/CodeSniffer/Standards/Generic/Sniffs/Functions/FunctionCallArgumentSpacingSniff.php b/CodeSniffer/Standards/Generic/Sniffs/Functions/FunctionCallArgumentSpacingSniff.php
index 110bc7ea6..4a848fd8b 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/Functions/FunctionCallArgumentSpacingSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/Functions/FunctionCallArgumentSpacingSniff.php
@@ -99,11 +99,11 @@ class Generic_Sniffs_Functions_FunctionCallArgumentSpacingSniff implements PHP_C
             if ($tokens[$nextSeparator]['code'] === T_CLOSURE) {
                 // Skip closures.
                 $nextSeparator = $tokens[$nextSeparator]['scope_closer'];
-                continue;
+                continue 2;
             } else if ($tokens[$nextSeparator]['code'] === T_OPEN_SHORT_ARRAY) {
                 // Skips arrays using short notation.
                 $nextSeparator = $tokens[$nextSeparator]['bracket_closer'];
-                continue;
+                continue 2;
             }
 
             // Make sure the comma or variable belongs directly to this function call,
@@ -111,7 +111,7 @@ class Generic_Sniffs_Functions_FunctionCallArgumentSpacingSniff implements PHP_C
             $brackets    = $tokens[$nextSeparator]['nested_parenthesis'];
             $lastBracket = array_pop($brackets);
             if ($lastBracket !== $closeBracket) {
-                continue;
+                continue 2;
             }
 
             if ($tokens[$nextSeparator]['code'] === T_COMMA) {
diff --git a/CodeSniffer/Standards/Generic/Sniffs/NamingConventions/ConstructorNameSniff.php b/CodeSniffer/Standards/Generic/Sniffs/NamingConventions/ConstructorNameSniff.php
index a69f94950..6bf2a2626 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/NamingConventions/ConstructorNameSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/NamingConventions/ConstructorNameSniff.php
@@ -135,7 +135,7 @@ class Generic_Sniffs_NamingConventions_ConstructorNameSniff extends PHP_CodeSnif
 
         for ($i = ($tokens[$currScope]['scope_opener'] + 1); $i < $tokens[$currScope]['scope_closer']; $i++) {
             if ($tokens[$i]['code'] !== T_FUNCTION) {
-                continue;
+                continue 2;
             }
 
             $next = $phpcsFile->findNext(T_STRING, $i);
diff --git a/CodeSniffer/Standards/Generic/Sniffs/VersionControl/SubversionPropertiesSniff.php b/CodeSniffer/Standards/Generic/Sniffs/VersionControl/SubversionPropertiesSniff.php
index 516c026c5..d3dfb943d 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/VersionControl/SubversionPropertiesSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/VersionControl/SubversionPropertiesSniff.php
@@ -93,7 +93,7 @@ class Generic_Sniffs_VersionControl_SubversionPropertiesSniff implements PHP_Cod
                           $properties[$key],
                          );
                 $phpcsFile->addError($error, $stackPtr, 'Unexpected', $data);
-                continue;
+                continue 2;
             }
 
             if (isset($properties[$key]) === false
@@ -105,7 +105,7 @@ class Generic_Sniffs_VersionControl_SubversionPropertiesSniff implements PHP_Cod
                           $this->properties[$key],
                          );
                 $phpcsFile->addError($error, $stackPtr, 'Missing', $data);
-                continue;
+                continue 2;
             }
 
             if ($properties[$key] !== null
diff --git a/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowSpaceIndentSniff.php b/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowSpaceIndentSniff.php
index b0aa97b73..6e9f518b6 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowSpaceIndentSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowSpaceIndentSniff.php
@@ -91,7 +91,7 @@ class Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff implements PHP_CodeSnif
         $tokens = $phpcsFile->getTokens();
         for ($i = ($stackPtr + 1); $i < $phpcsFile->numTokens; $i++) {
             if ($tokens[$i]['column'] !== 1 || isset($checkTokens[$tokens[$i]['code']]) === false) {
-                continue;
+                continue 2;
             }
 
             // If tabs are being converted to spaces by the tokeniser, the
@@ -120,18 +120,18 @@ class Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff implements PHP_CodeSnif
 
             if ($hasSpaces === false && $hasTabs === false) {
                 // Empty line.
-                continue;
+                continue 2;
             }
 
             if ($hasSpaces === false && $hasTabs !== false) {
                 // All ok, nothing to do.
                 $phpcsFile->recordMetric($i, 'Line indent', 'tabs');
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] === T_DOC_COMMENT_WHITESPACE && $content === ' ') {
                 // Ignore file/class-level DocBlock, especially for recording metrics.
-                continue;
+                continue 2;
             }
 
             // OK, by now we know there will be spaces.
@@ -148,7 +148,7 @@ class Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff implements PHP_CodeSnif
 
                 if ($numTabs === 0) {
                     // Ignore: precision indentation.
-                    continue;
+                    continue 2;
                 }
             } else {
                 if ($numTabs === 0) {
@@ -158,7 +158,7 @@ class Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff implements PHP_CodeSnif
                     if ($tabAfterSpaces === false) {
                         // Ignore: precision indentation is already at the
                         // end of the whitespace.
-                        continue;
+                        continue 2;
                     }
                 } else {
                     $phpcsFile->recordMetric($i, 'Line indent', 'mixed');
diff --git a/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowTabIndentSniff.php b/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowTabIndentSniff.php
index 8091730d9..2758c72c1 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowTabIndentSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/DisallowTabIndentSniff.php
@@ -78,7 +78,7 @@ class Generic_Sniffs_WhiteSpace_DisallowTabIndentSniff implements PHP_CodeSniffe
 
         for ($i = ($stackPtr + 1); $i < $phpcsFile->numTokens; $i++) {
             if (isset($checkTokens[$tokens[$i]['code']]) === false) {
-                continue;
+                continue 2;
             }
 
             // If tabs are being converted to spaces by the tokeniser, the
@@ -90,12 +90,12 @@ class Generic_Sniffs_WhiteSpace_DisallowTabIndentSniff implements PHP_CodeSniffe
             }
 
             if ($content === '') {
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] === T_DOC_COMMENT_WHITESPACE && $content === ' ') {
                 // Ignore file/class-level DocBlock, especially for recording metrics.
-                continue;
+                continue 2;
             }
 
             $tabFound = false;
@@ -123,7 +123,7 @@ class Generic_Sniffs_WhiteSpace_DisallowTabIndentSniff implements PHP_CodeSniffe
             }//end if
 
             if ($tabFound === false) {
-                continue;
+                continue 2;
             }
 
             $fix = $phpcsFile->addFixableError($error, $i, $errorCode);
diff --git a/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/ScopeIndentSniff.php b/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/ScopeIndentSniff.php
index dabee898c..4793b7579 100644
--- a/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/ScopeIndentSniff.php
+++ b/CodeSniffer/Standards/Generic/Sniffs/WhiteSpace/ScopeIndentSniff.php
@@ -184,7 +184,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
             foreach ($this->ignoreIndentationTokens as $token) {
                 if (is_int($token) === false) {
                     if (defined($token) === false) {
-                        continue;
+                        continue 2;
                     }
 
                     $token = constant($token);
@@ -908,7 +908,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                 || $tokens[$i]['code'] === T_START_NOWDOC
             ) {
                 $i = $phpcsFile->findNext(array(T_END_HEREDOC, T_END_NOWDOC), ($i + 1));
-                continue;
+                continue 2;
             }
 
             // Completely skip multi-line strings as the indent is a part of the
@@ -918,14 +918,14 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
             ) {
                 $i = $phpcsFile->findNext($tokens[$i]['code'], ($i + 1), null, true);
                 $i--;
-                continue;
+                continue 2;
             }
 
             // Completely skip doc comments as they tend to have complex
             // indentation rules.
             if ($tokens[$i]['code'] === T_DOC_COMMENT_OPEN_TAG) {
                 $i = $tokens[$i]['comment_closer'];
-                continue;
+                continue 2;
             }
 
             // Open tags reset the indent level.
@@ -959,7 +959,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                     echo "\t=> indent set to $currentIndent by token $i ($type)".PHP_EOL;
                 }
 
-                continue;
+                continue 2;
             }//end if
 
             // Close tags reset the indent level, unless they are closing a tag
@@ -994,7 +994,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                     echo "\t=> indent set to $currentIndent by token $i ($type)".PHP_EOL;
                 }
 
-                continue;
+                continue 2;
             }//end if
 
             // Anon classes and functions set the indent based on their own indent level.
@@ -1008,7 +1008,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                     }
 
                     $i = $closer;
-                    continue;
+                    continue 2;
                 }
 
                 if ($this->_debug === true) {
@@ -1034,7 +1034,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                     echo "\t=> indent set to $currentIndent by token $i ($type)".PHP_EOL;
                 }
 
-                continue;
+                continue 2;
             }//end if
 
             // Scope openers increase the indent level.
@@ -1051,7 +1051,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                     }
 
                     $i = $closer;
-                    continue;
+                    continue 2;
                 }
 
                 $condition = $tokens[$tokens[$i]['scope_condition']]['code'];
@@ -1073,7 +1073,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                         echo "\t=> indent set to $currentIndent by token $i ($type)".PHP_EOL;
                     }
 
-                    continue;
+                    continue 2;
                 }
             }//end if
 
@@ -1089,7 +1089,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                     }
 
                     $i = $closer;
-                    continue;
+                    continue 2;
                 }
 
                 if ($this->_debug === true) {
@@ -1112,7 +1112,7 @@ class Generic_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Snif
                     echo "\t=> indent set to $currentIndent by token $first ($type)".PHP_EOL;
                 }
 
-                continue;
+                continue 2;
             }//end if
 
             // Closing an anon class or function.
diff --git a/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php b/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php
index a0544cae8..50414d0fa 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php
@@ -80,20 +80,20 @@ class MySource_Sniffs_Channels_DisallowSelfActionsSniff implements PHP_CodeSniff
                     $foundFunctions[$tokens[$funcName]['content']] = strtolower($tokens[$funcScope]['content']);
                 }
 
-                continue;
+                continue 2;
             }
 
             $prevToken = $phpcsFile->findPrevious(T_WHITESPACE, ($i - 1), null, true);
             if ($tokens[$prevToken]['content'] !== 'self'
                 && $tokens[$prevToken]['content'] !== 'static'
             ) {
-                continue;
+                continue 2;
             }
 
             $funcNameToken = $phpcsFile->findNext(T_WHITESPACE, ($i + 1), null, true);
             if ($tokens[$funcNameToken]['code'] === T_VARIABLE) {
                 // We are only interested in function calls.
-                continue;
+                continue 2;
             }
 
             $funcName = $tokens[$funcNameToken]['content'];
@@ -102,7 +102,7 @@ class MySource_Sniffs_Channels_DisallowSelfActionsSniff implements PHP_CodeSniff
             // public, private or protected. If it starts with an underscore we
             // can assume it is private.
             if ($funcName{0} === '_') {
-                continue;
+                continue 2;
             }
 
             $foundCalls[$i] = array(
@@ -117,7 +117,7 @@ class MySource_Sniffs_Channels_DisallowSelfActionsSniff implements PHP_CodeSniff
             if (isset($foundFunctions[$funcData['name']]) === false) {
                 // Function was not in this class, might have come from the parent.
                 // Either way, we can't really check this.
-                continue;
+                continue 2;
             } else if ($foundFunctions[$funcData['name']] === 'public') {
                 $type  = $funcData['type'];
                 $error = "Static calls to public methods in Action classes must not use the $type keyword; use %s::%s() instead";
diff --git a/CodeSniffer/Standards/MySource/Sniffs/Channels/IncludeSystemSniff.php b/CodeSniffer/Standards/MySource/Sniffs/Channels/IncludeSystemSniff.php
index 05ea6f2c8..4d43a2d0c 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/Channels/IncludeSystemSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/Channels/IncludeSystemSniff.php
@@ -154,7 +154,7 @@ class MySource_Sniffs_Channels_IncludeSystemSniff extends PHP_CodeSniffer_Standa
             // Skip other scopes.
             if (isset($tokens[$i]['scope_closer']) === true) {
                 $i = $tokens[$i]['scope_closer'];
-                continue;
+                continue 2;
             }
 
             $name = $this->getIncludedClassFromToken($phpcsFile, $tokens, $i);
@@ -267,7 +267,7 @@ class MySource_Sniffs_Channels_IncludeSystemSniff extends PHP_CodeSniffer_Standa
                 && isset($tokens[$i]['scope_closer']) === true
             ) {
                 $i = $tokens[$i]['scope_closer'];
-                continue;
+                continue 2;
             }
 
             $name = $this->getIncludedClassFromToken($phpcsFile, $tokens, $i);
diff --git a/CodeSniffer/Standards/MySource/Sniffs/Channels/UnusedSystemSniff.php b/CodeSniffer/Standards/MySource/Sniffs/Channels/UnusedSystemSniff.php
index 3a6650913..3313fc5b0 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/Channels/UnusedSystemSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/Channels/UnusedSystemSniff.php
@@ -95,7 +95,7 @@ class MySource_Sniffs_Channels_UnusedSystemSniff implements PHP_CodeSniffer_Snif
                         if ($tokens[$cond]['code'] === T_IF) {
                             $i = $tokens[$cond]['scope_closer'];
                             $level--;
-                            continue;
+                            continue 2;
                         }
                     }
                 }
@@ -107,7 +107,7 @@ class MySource_Sniffs_Channels_UnusedSystemSniff implements PHP_CodeSniffer_Snif
                 && $tokens[$i]['code'] !== T_EXTENDS
                 && $tokens[$i]['code'] !== T_IMPLEMENTS
             ) {
-                continue;
+                continue 2;
             }
 
             switch ($tokens[$i]['code']) {
diff --git a/CodeSniffer/Standards/MySource/Sniffs/Objects/CreateWidgetTypeCallbackSniff.php b/CodeSniffer/Standards/MySource/Sniffs/Objects/CreateWidgetTypeCallbackSniff.php
index 7147e5c34..890dfe7df 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/Objects/CreateWidgetTypeCallbackSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/Objects/CreateWidgetTypeCallbackSniff.php
@@ -104,14 +104,14 @@ class MySource_Sniffs_Objects_CreateWidgetTypeCallbackSniff implements PHP_CodeS
             if ($nestedFunction !== null) {
                 if ($i === $nestedFunction) {
                     $nestedFunction = null;
-                    continue;
+                    continue 2;
                 }
             } else if (($tokens[$i]['code'] === T_FUNCTION
                 || $tokens[$i]['code'] === T_CLOSURE)
                 && isset($tokens[$i]['scope_closer']) === true
             ) {
                 $nestedFunction = $tokens[$i]['scope_closer'];
-                continue;
+                continue 2;
             }
 
             if ($nestedFunction === null && $tokens[$i]['code'] === T_RETURN) {
@@ -121,11 +121,11 @@ class MySource_Sniffs_Objects_CreateWidgetTypeCallbackSniff implements PHP_CodeS
                     $phpcsFile->addError($error, $i, 'ReturnValue');
                 }
 
-                continue;
+                continue 2;
             } else if ($tokens[$i]['code'] !== T_STRING
                 || $tokens[$i]['content'] !== 'callback'
             ) {
-                continue;
+                continue 2;
             }
 
             // If this is the form "callback.call(" then it is a call
@@ -138,7 +138,7 @@ class MySource_Sniffs_Objects_CreateWidgetTypeCallbackSniff implements PHP_CodeS
                 // being passed to another function, like this
                 // "this.init(something, callback, something)".
                 if (isset($tokens[$i]['nested_parenthesis']) === false) {
-                    continue;
+                    continue 2;
                 }
 
                 // Just make sure those brackets dont belong to anyone,
@@ -163,7 +163,7 @@ class MySource_Sniffs_Objects_CreateWidgetTypeCallbackSniff implements PHP_CodeS
 
                 if ($tokens[$prev]['code'] !== T_STRING) {
                     // This is not a function passing the callback.
-                    continue;
+                    continue 2;
                 }
 
                 $passedCallback = true;
@@ -190,19 +190,19 @@ class MySource_Sniffs_Objects_CreateWidgetTypeCallbackSniff implements PHP_CodeS
             for ($next = $endBracket; $next <= $end; $next++) {
                 // Skip whitespace so we find the next content after the call.
                 if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$next]['code']]) === true) {
-                    continue;
+                    continue 2;
                 }
 
                 // Skip closing braces like END IF because it is not executable code.
                 if ($tokens[$next]['code'] === T_CLOSE_CURLY_BRACKET) {
-                    continue;
+                    continue 2;
                 }
 
                 // We don't care about anything on the current line, like a
                 // semicolon. It doesn't matter if there are other statements on the
                 // line because another sniff will check for those.
                 if ($tokens[$next]['line'] === $tokens[$endBracket]['line']) {
-                    continue;
+                    continue 2;
                 }
 
                 break;
diff --git a/CodeSniffer/Standards/MySource/Sniffs/PHP/AjaxNullComparisonSniff.php b/CodeSniffer/Standards/MySource/Sniffs/PHP/AjaxNullComparisonSniff.php
index 405dfa246..6bedce7c0 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/PHP/AjaxNullComparisonSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/PHP/AjaxNullComparisonSniff.php
@@ -84,19 +84,19 @@ class MySource_Sniffs_PHP_AjaxNullComparisonSniff implements PHP_CodeSniffer_Sni
             if ($tokens[$i]['code'] !== T_VARIABLE
                 || isset($foundVars[$tokens[$i]['content']]) === false
             ) {
-                continue;
+                continue 2;
             }
 
             $operator = $phpcsFile->findNext(T_WHITESPACE, ($i + 1), null, true);
             if ($tokens[$operator]['code'] !== T_IS_IDENTICAL
                 && $tokens[$operator]['code'] !== T_IS_NOT_IDENTICAL
             ) {
-                continue;
+                continue 2;
             }
 
             $nullValue = $phpcsFile->findNext(T_WHITESPACE, ($operator + 1), null, true);
             if ($tokens[$nullValue]['code'] !== T_NULL) {
-                continue;
+                continue 2;
             }
 
             $error = 'Values submitted via Ajax requests should not be compared directly to NULL; use empty() instead';
diff --git a/CodeSniffer/Standards/MySource/Sniffs/PHP/EvalObjectFactorySniff.php b/CodeSniffer/Standards/MySource/Sniffs/PHP/EvalObjectFactorySniff.php
index 945f57146..43ff28ae0 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/PHP/EvalObjectFactorySniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/PHP/EvalObjectFactorySniff.php
@@ -83,13 +83,13 @@ class MySource_Sniffs_PHP_EvalObjectFactorySniff implements PHP_CodeSniffer_Snif
                 $prevContent = $phpcsFile->findPrevious(T_WHITESPACE, ($prev - 1), null, true);
                 if ($tokens[$prevContent]['line'] === $tokens[$prev]['line']) {
                     $varPtr = $prevContent;
-                    continue;
+                    continue 2;
                 }
 
                 if ($tokens[$prev]['content'] !== $varName) {
                     // This variable has a different name.
                     $varPtr = $prevContent;
-                    continue;
+                    continue 2;
                 }
 
                 // We found one.
diff --git a/CodeSniffer/Standards/MySource/Sniffs/PHP/ReturnFunctionValueSniff.php b/CodeSniffer/Standards/MySource/Sniffs/PHP/ReturnFunctionValueSniff.php
index 458150cfa..1e1dec9b5 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/PHP/ReturnFunctionValueSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/PHP/ReturnFunctionValueSniff.php
@@ -60,7 +60,7 @@ class MySource_Sniffs_PHP_ReturnFunctionValueSniff implements PHP_CodeSniffer_Sn
             if ($tokens[$bracket]['code'] !== T_OPEN_PARENTHESIS) {
                 // Not a function call.
                 $functionName = $phpcsFile->findNext(T_STRING, ($functionName + 1), null, false, null, true);
-                continue;
+                continue 2;
             }
 
             $error = 'The result of a function call should be assigned to a variable before being returned';
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/ClassCommentSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/ClassCommentSniff.php
index 191496bbc..ad0511872 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/ClassCommentSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/ClassCommentSniff.php
@@ -101,7 +101,7 @@ class PEAR_Sniffs_Commenting_ClassCommentSniff extends PEAR_Sniffs_Commenting_Fi
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php
index 502e432de..4e73eff18 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php
@@ -236,7 +236,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tokens[$commentStart]['comment_tags'] as $tag) {
             $name = $tokens[$tag]['content'];
             if (isset($this->tags[$name]) === false) {
-                continue;
+                continue 2;
             }
 
             if ($this->tags[$name]['allow_multiple'] === false && isset($tagTokens[$name]) === true) {
@@ -259,7 +259,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
                           $docBlock,
                          );
                 $phpcsFile->addError($error, $tag, 'Empty'.ucfirst(substr($name, 1)).'Tag', $data);
-                continue;
+                continue 2;
             }
         }//end foreach
 
@@ -276,7 +276,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
                     $phpcsFile->addError($error, $commentEnd, 'Missing'.ucfirst(substr($tag, 1)).'Tag', $data);
                 }
 
-                continue;
+                continue 2;
             } else {
                 $method = 'process'.substr($tag, 1);
                 if (method_exists($this, $method) === true) {
@@ -322,7 +322,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
@@ -364,12 +364,12 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
             if (PHP_CodeSniffer::isUnderscoreName($content) === true) {
-                continue;
+                continue 2;
             }
 
             $newContent = str_replace(' ', '_', $content);
@@ -417,12 +417,12 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
             if (PHP_CodeSniffer::isUnderscoreName($content) === true) {
-                continue;
+                continue 2;
             }
 
             $newContent = str_replace(' ', '_', $content);
@@ -461,7 +461,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
@@ -491,7 +491,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
@@ -532,7 +532,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
@@ -561,7 +561,7 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
         foreach ($tags as $tag) {
             if ($tokens[($tag + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                 // No content.
-                continue;
+                continue 2;
             }
 
             $content = $tokens[($tag + 2)]['content'];
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php
index bcd4e6493..17d5f29d8 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php
@@ -173,7 +173,7 @@ class PEAR_Sniffs_Commenting_FunctionCommentSniff implements PHP_CodeSniffer_Sni
         $throws = array();
         foreach ($tokens[$commentStart]['comment_tags'] as $tag) {
             if ($tokens[$tag]['content'] !== '@throws') {
-                continue;
+                continue 2;
             }
 
             $exception = null;
@@ -215,7 +215,7 @@ class PEAR_Sniffs_Commenting_FunctionCommentSniff implements PHP_CodeSniffer_Sni
         $maxVar  = 0;
         foreach ($tokens[$commentStart]['comment_tags'] as $pos => $tag) {
             if ($tokens[$tag]['content'] !== '@param') {
-                continue;
+                continue 2;
             }
 
             $type       = '';
@@ -299,7 +299,7 @@ class PEAR_Sniffs_Commenting_FunctionCommentSniff implements PHP_CodeSniffer_Sni
 
         foreach ($params as $pos => $param) {
             if ($param['var'] === '') {
-                continue;
+                continue 2;
             }
 
             $foundParams[] = $param['var'];
@@ -373,7 +373,7 @@ class PEAR_Sniffs_Commenting_FunctionCommentSniff implements PHP_CodeSniffer_Sni
             }//end if
 
             if ($param['comment'] === '') {
-                continue;
+                continue 2;
             }
 
             // Check number of spaces after the var name.
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/ControlStructures/MultiLineConditionSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/ControlStructures/MultiLineConditionSniff.php
index 1d0f88d31..024f5a562 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/ControlStructures/MultiLineConditionSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/ControlStructures/MultiLineConditionSniff.php
@@ -158,7 +158,7 @@ class PEAR_Sniffs_ControlStructures_MultiLineConditionSniff implements PHP_CodeS
 
                 if ($tokens[$i]['code'] === T_COMMENT) {
                     $prevLine = $tokens[$i]['line'];
-                    continue;
+                    continue 2;
                 }
 
                 // We changed lines, so this should be a whitespace indent token.
@@ -217,7 +217,7 @@ class PEAR_Sniffs_ControlStructures_MultiLineConditionSniff implements PHP_CodeS
                     // have their own indentation rules.
                     $i        = $tokens[$next]['parenthesis_closer'];
                     $prevLine = $tokens[$i]['line'];
-                    continue;
+                    continue 2;
                 }
             }
         }//end for
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionCallSignatureSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionCallSignatureSniff.php
index 97e181a4b..75bf29568 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionCallSignatureSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionCallSignatureSniff.php
@@ -414,19 +414,19 @@ class PEAR_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffe
 
                 // Ignore heredoc indentation.
                 if (isset(PHP_CodeSniffer_Tokens::$heredocTokens[$tokens[$i]['code']]) === true) {
-                    continue;
+                    continue 2;
                 }
 
                 // Ignore multi-line string indentation.
                 if (isset(PHP_CodeSniffer_Tokens::$stringTokens[$tokens[$i]['code']]) === true
                     && $tokens[$i]['code'] === $tokens[($i - 1)]['code']
                 ) {
-                    continue;
+                    continue 2;
                 }
 
                 // Ignore inline HTML.
                 if ($tokens[$i]['code'] === T_INLINE_HTML) {
-                    continue;
+                    continue 2;
                 }
 
                 if ($tokens[$i]['line'] !== $tokens[$openBracket]['line']) {
@@ -444,7 +444,7 @@ class PEAR_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffe
                                 }
                             }
 
-                            continue;
+                            continue 2;
                         }
                     } else {
                         $nextCode = $i;
@@ -471,7 +471,7 @@ class PEAR_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffe
                             if ($trimmedLength === 0) {
                                 // This is a blank comment line, so indenting it is
                                 // pointless.
-                                continue;
+                                continue 2;
                             }
 
                             $foundIndent = (strlen($tokens[$i]['content']) - $trimmedLength);
@@ -522,7 +522,7 @@ class PEAR_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffe
             if ($inArg === false && $tokens[$i]['code'] === T_COMMA) {
                 $next = $phpcsFile->findNext(array(T_WHITESPACE, T_COMMENT), ($i + 1), $closeBracket, true);
                 if ($next === false) {
-                    continue;
+                    continue 2;
                 }
 
                 if ($this->allowMultipleArguments === false) {
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionDeclarationSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionDeclarationSniff.php
index c93dc8015..786600da9 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionDeclarationSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionDeclarationSniff.php
@@ -389,7 +389,7 @@ class PEAR_Sniffs_Functions_FunctionDeclarationSniff implements PHP_CodeSniffer_
                 }
 
                 $lastLine = $tokens[$i]['line'];
-                continue;
+                continue 2;
             }
         }//end for
 
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Functions/ValidDefaultValueSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Functions/ValidDefaultValueSniff.php
index 76a81a00f..be033a04e 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Functions/ValidDefaultValueSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Functions/ValidDefaultValueSniff.php
@@ -70,7 +70,7 @@ class PEAR_Sniffs_Functions_ValidDefaultValueSniff implements PHP_CodeSniffer_Sn
         $params = $phpcsFile->getMethodParameters($stackPtr);
         foreach ($params as $param) {
             if ($param['variable_length'] === true) {
-                continue;
+                continue 2;
             }
 
             if (array_key_exists('default', $param) === true) {
@@ -82,7 +82,7 @@ class PEAR_Sniffs_Functions_ValidDefaultValueSniff implements PHP_CodeSniffer_Sn
                     $defaultFound = false;
                 }
 
-                continue;
+                continue 2;
             }
 
             if ($defaultFound === true) {
diff --git a/CodeSniffer/Standards/PSR1/Sniffs/Files/SideEffectsSniff.php b/CodeSniffer/Standards/PSR1/Sniffs/Files/SideEffectsSniff.php
index a41051f2a..7a9604258 100644
--- a/CodeSniffer/Standards/PSR1/Sniffs/Files/SideEffectsSniff.php
+++ b/CodeSniffer/Standards/PSR1/Sniffs/Files/SideEffectsSniff.php
@@ -109,19 +109,19 @@ class PSR1_Sniffs_Files_SideEffectsSniff implements PHP_CodeSniffer_Sniff
         for ($i = $start; $i <= $end; $i++) {
             // Ignore whitespace and comments.
             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$i]['code']]) === true) {
-                continue;
+                continue 2;
             }
 
             // Ignore PHP tags.
             if ($tokens[$i]['code'] === T_OPEN_TAG
                 || $tokens[$i]['code'] === T_CLOSE_TAG
             ) {
-                continue;
+                continue 2;
             }
 
             // Ignore shebang.
             if (substr($tokens[$i]['content'], 0, 2) === '#!') {
-                continue;
+                continue 2;
             }
 
             // Ignore entire namespace, declare, const and use statements.
@@ -139,18 +139,18 @@ class PSR1_Sniffs_Files_SideEffectsSniff implements PHP_CodeSniffer_Sniff
                     }
                 }
 
-                continue;
+                continue 2;
             }
 
             // Ignore function/class prefixes.
             if (isset(PHP_CodeSniffer_Tokens::$methodPrefixes[$tokens[$i]['code']]) === true) {
-                continue;
+                continue 2;
             }
 
             // Ignore anon classes.
             if ($tokens[$i]['code'] === T_ANON_CLASS) {
                 $i = $tokens[$i]['scope_closer'];
-                continue;
+                continue 2;
             }
 
             // Detect and skip over symbols.
@@ -162,7 +162,7 @@ class PSR1_Sniffs_Files_SideEffectsSniff implements PHP_CodeSniffer_Sniff
                 }
 
                 $i = $tokens[$i]['scope_closer'];
-                continue;
+                continue 2;
             } else if ($tokens[$i]['code'] === T_STRING
                 && strtolower($tokens[$i]['content']) === 'define'
             ) {
@@ -177,7 +177,7 @@ class PSR1_Sniffs_Files_SideEffectsSniff implements PHP_CodeSniffer_Sniff
                         $i = $semicolon;
                     }
 
-                    continue;
+                    continue 2;
                 }
             }//end if
 
@@ -187,7 +187,7 @@ class PSR1_Sniffs_Files_SideEffectsSniff implements PHP_CodeSniffer_Sniff
             if (isset($conditions[$tokens[$i]['code']]) === true) {
                 if (isset($tokens[$i]['scope_opener']) === false) {
                     // Probably an "else if", so just ignore.
-                    continue;
+                    continue 2;
                 }
 
                 $result = $this->_searchForConflict(
@@ -214,7 +214,7 @@ class PSR1_Sniffs_Files_SideEffectsSniff implements PHP_CodeSniffer_Sniff
                 }
 
                 $i = $tokens[$i]['scope_closer'];
-                continue;
+                continue 2;
             }//end if
 
             if ($firstEffect === null) {
diff --git a/CodeSniffer/Standards/PSR2/Sniffs/Classes/ClassDeclarationSniff.php b/CodeSniffer/Standards/PSR2/Sniffs/Classes/ClassDeclarationSniff.php
index c219ba579..450816f97 100644
--- a/CodeSniffer/Standards/PSR2/Sniffs/Classes/ClassDeclarationSniff.php
+++ b/CodeSniffer/Standards/PSR2/Sniffs/Classes/ClassDeclarationSniff.php
@@ -118,7 +118,7 @@ class PSR2_Sniffs_Classes_ClassDeclarationSniff extends PEAR_Sniffs_Classes_Clas
         $classIndent = 0;
         for ($i = ($stackPtr - 1); $i > 0; $i--) {
             if ($tokens[$i]['line'] === $tokens[$stackPtr]['line']) {
-                continue;
+                continue 2;
             }
 
             // We changed lines.
@@ -245,7 +245,7 @@ class PSR2_Sniffs_Classes_ClassDeclarationSniff extends PEAR_Sniffs_Classes_Clas
             if ($tokens[$className]['code'] === $keywordTokenType) {
                 $checkingImplements = true;
                 $implementsToken    = $className;
-                continue;
+                continue 2;
             }
 
             if ($checkingImplements === true
diff --git a/CodeSniffer/Standards/PSR2/Sniffs/ControlStructures/SwitchDeclarationSniff.php b/CodeSniffer/Standards/PSR2/Sniffs/ControlStructures/SwitchDeclarationSniff.php
index c624271da..856923aba 100644
--- a/CodeSniffer/Standards/PSR2/Sniffs/ControlStructures/SwitchDeclarationSniff.php
+++ b/CodeSniffer/Standards/PSR2/Sniffs/ControlStructures/SwitchDeclarationSniff.php
@@ -188,7 +188,7 @@ class PSR2_Sniffs_ControlStructures_SwitchDeclarationSniff implements PHP_CodeSn
 
             // We only want cases from here on in.
             if ($type !== 'case') {
-                continue;
+                continue 2;
             }
 
             $nextCode = $phpcsFile->findNext(
@@ -234,7 +234,7 @@ class PSR2_Sniffs_ControlStructures_SwitchDeclarationSniff implements PHP_CodeSn
             // Skip nested SWITCH statements; they are handled on their own.
             if ($tokens[$stackPtr]['code'] === T_SWITCH) {
                 $stackPtr = $tokens[$stackPtr]['scope_closer'];
-                continue;
+                continue 2;
             }
 
             break;
diff --git a/CodeSniffer/Standards/PSR2/Sniffs/Methods/FunctionClosingBraceSniff.php b/CodeSniffer/Standards/PSR2/Sniffs/Methods/FunctionClosingBraceSniff.php
index 8a4c188a4..a2e6dc43b 100644
--- a/CodeSniffer/Standards/PSR2/Sniffs/Methods/FunctionClosingBraceSniff.php
+++ b/CodeSniffer/Standards/PSR2/Sniffs/Methods/FunctionClosingBraceSniff.php
@@ -84,7 +84,7 @@ class PSR2_Sniffs_Methods_FunctionClosingBraceSniff implements PHP_CodeSniffer_S
             $phpcsFile->fixer->beginChangeset();
             for ($i = ($prevContent + 1); $i < $closeBrace; $i++) {
                 if ($tokens[$i]['line'] === $tokens[$prevContent]['line']) {
-                    continue;
+                    continue 2;
                 }
 
                 // Don't remove any identation before the brace.
diff --git a/CodeSniffer/Standards/PSR2/Sniffs/Namespaces/NamespaceDeclarationSniff.php b/CodeSniffer/Standards/PSR2/Sniffs/Namespaces/NamespaceDeclarationSniff.php
index aba41b8b1..9ba2d83e4 100644
--- a/CodeSniffer/Standards/PSR2/Sniffs/Namespaces/NamespaceDeclarationSniff.php
+++ b/CodeSniffer/Standards/PSR2/Sniffs/Namespaces/NamespaceDeclarationSniff.php
@@ -56,7 +56,7 @@ class PSR2_Sniffs_Namespaces_NamespaceDeclarationSniff implements PHP_CodeSniffe
 
         for ($i = ($stackPtr + 1); $i < ($phpcsFile->numTokens - 1); $i++) {
             if ($tokens[$i]['line'] === $tokens[$stackPtr]['line']) {
-                continue;
+                continue 2;
             }
 
             break;
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Arrays/ArrayDeclarationSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Arrays/ArrayDeclarationSniff.php
index ff5a286fd..596bd6a9b 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Arrays/ArrayDeclarationSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Arrays/ArrayDeclarationSniff.php
@@ -159,7 +159,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
             // Skip bracketed statements, like function calls.
             if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {
                 $i = $tokens[$i]['parenthesis_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] === T_COMMA) {
@@ -363,7 +363,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                 || $tokens[$nextToken]['parenthesis_owner'] !== $stackPtr)
             ) {
                 $nextToken = $tokens[$nextToken]['parenthesis_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$nextToken]['code'] === T_ARRAY
@@ -392,13 +392,13 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     $lastToken = $nextToken;
                 }
 
-                continue;
+                continue 2;
             }//end if
 
             if ($tokens[$nextToken]['code'] !== T_DOUBLE_ARROW
                 && $tokens[$nextToken]['code'] !== T_COMMA
             ) {
-                continue;
+                continue 2;
             }
 
             $currentEntry = array();
@@ -422,7 +422,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     // This comma is inside more parenthesis than the ARRAY keyword,
                     // then there it is actually a comma used to separate arguments
                     // in a function call.
-                    continue;
+                    continue 2;
                 }
 
                 if ($keyUsed === true && $tokens[$lastToken]['code'] === T_COMMA) {
@@ -464,7 +464,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                 }//end if
 
                 $lastToken = $nextToken;
-                continue;
+                continue 2;
             }//end if
 
             if ($tokens[$nextToken]['code'] === T_DOUBLE_ARROW) {
@@ -592,7 +592,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     // Array was malformed and we couldn't figure out
                     // the array value correctly, so we have to ignore it.
                     // Other parts of this sniff will correct the error.
-                    continue;
+                    continue 2;
                 }
 
                 if ($lastValueLine !== false && $tokens[$value['value']]['line'] === $lastValueLine) {
@@ -677,7 +677,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     }
                 }
 
-                continue;
+                continue 2;
             }
 
             $lastIndexLine = $indexLine;
@@ -690,7 +690,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     $phpcsFile->fixer->addNewlineBefore($index['index']);
                 }
 
-                continue;
+                continue 2;
             }
 
             if ($indexLine === $lastIndexLine) {
@@ -704,7 +704,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     $phpcsFile->fixer->addNewlineBefore($index['index']);
                 }
 
-                continue;
+                continue 2;
             }
 
             if ($tokens[$index['index']]['column'] !== $indicesStart) {
@@ -725,7 +725,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     }
                 }
 
-                continue;
+                continue 2;
             }
 
             if ($tokens[$index['arrow']]['column'] !== $arrowStart) {
@@ -746,7 +746,7 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     }
                 }
 
-                continue;
+                continue 2;
             }
 
             if ($tokens[$index['value']]['column'] !== $valueStart) {
@@ -789,13 +789,13 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                 if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {
                     $i         = $tokens[$i]['parenthesis_closer'];
                     $valueLine = $tokens[$i]['line'];
-                    continue;
+                    continue 2;
                 }
 
                 if ($tokens[$i]['code'] === T_ARRAY) {
                     $i         = $tokens[$tokens[$i]['parenthesis_opener']]['parenthesis_closer'];
                     $valueLine = $tokens[$i]['line'];
-                    continue;
+                    continue 2;
                 }
 
                 // Skip to the end of multi-line strings.
@@ -803,19 +803,19 @@ class Squiz_Sniffs_Arrays_ArrayDeclarationSniff implements PHP_CodeSniffer_Sniff
                     $i = $phpcsFile->findNext($tokens[$i]['code'], ($i + 1), null, true);
                     $i--;
                     $valueLine = $tokens[$i]['line'];
-                    continue;
+                    continue 2;
                 }
 
                 if ($tokens[$i]['code'] === T_OPEN_SHORT_ARRAY) {
                     $i         = $tokens[$i]['bracket_closer'];
                     $valueLine = $tokens[$i]['line'];
-                    continue;
+                    continue 2;
                 }
 
                 if ($tokens[$i]['code'] === T_CLOSURE) {
                     $i         = $tokens[$i]['scope_closer'];
                     $valueLine = $tokens[$i]['line'];
-                    continue;
+                    continue 2;
                 }
 
                 if ($tokens[$i]['code'] === T_COMMA) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/CSS/ClassDefinitionNameSpacingSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/CSS/ClassDefinitionNameSpacingSniff.php
index 02d6ae19e..e017b4530 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/CSS/ClassDefinitionNameSpacingSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/CSS/ClassDefinitionNameSpacingSniff.php
@@ -90,7 +90,7 @@ class Squiz_Sniffs_CSS_ClassDefinitionNameSpacingSniff implements PHP_CodeSniffe
                     $foundContent = true;
                 }
 
-                continue;
+                continue 2;
             }
 
             // We changed lines.
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateStyleDefinitionSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateStyleDefinitionSniff.php
index 4c04a80a9..48f4d2ccd 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateStyleDefinitionSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateStyleDefinitionSniff.php
@@ -76,7 +76,7 @@ class Squiz_Sniffs_CSS_DuplicateStyleDefinitionSniff implements PHP_CodeSniffer_
 
             if ($tokens[$next]['code'] === T_OPEN_CURLY_BRACKET) {
                 $next = $tokens[$next]['bracket_closer'];
-                continue;
+                continue 2;
             }
 
             $name = $tokens[$next]['content'];
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/CSS/IndentationSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/CSS/IndentationSniff.php
index 27e3a4c14..5b9bac192 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/CSS/IndentationSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/CSS/IndentationSniff.php
@@ -74,7 +74,7 @@ class Squiz_Sniffs_CSS_IndentationSniff implements PHP_CodeSniffer_Sniff
         for ($i = 1; $i < $numTokens; $i++) {
             if ($tokens[$i]['code'] === T_COMMENT) {
                 // Don't check the indent of comments.
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] === T_OPEN_CURLY_BRACKET) {
@@ -107,7 +107,7 @@ class Squiz_Sniffs_CSS_IndentationSniff implements PHP_CodeSniffer_Sniff
                 || $tokens[$i]['code'] === T_OPEN_CURLY_BRACKET
                 || $tokens[$i]['code'] === T_CLOSE_CURLY_BRACKET
             ) {
-                continue;
+                continue 2;
             }
 
             // We started a new line, so check indent.
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/CSS/LowercaseStyleDefinitionSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/CSS/LowercaseStyleDefinitionSniff.php
index 5155a4056..33f46c7e0 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/CSS/LowercaseStyleDefinitionSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/CSS/LowercaseStyleDefinitionSniff.php
@@ -68,7 +68,7 @@ class Squiz_Sniffs_CSS_LowercaseStyleDefinitionSniff implements PHP_CodeSniffer_
             // Skip nested definitions as they are checked individually.
             if ($tokens[$i]['code'] === T_OPEN_CURLY_BRACKET) {
                 $i = $tokens[$i]['bracket_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] === T_STYLE) {
@@ -81,7 +81,7 @@ class Squiz_Sniffs_CSS_LowercaseStyleDefinitionSniff implements PHP_CodeSniffer_
 
             if ($inStyle === 'progid') {
                 // Special case for IE filters.
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] === T_STYLE
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Classes/ClassDeclarationSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Classes/ClassDeclarationSniff.php
index 4bf7855d2..b5299937c 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Classes/ClassDeclarationSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Classes/ClassDeclarationSniff.php
@@ -132,7 +132,7 @@ class Squiz_Sniffs_Classes_ClassDeclarationSniff extends PSR2_Sniffs_Classes_Cla
                 && ($tokens[$nextContent]['code'] === T_WHITESPACE
                 || $tokens[$nextContent]['code'] === T_COMMENT)
             ) {
-                continue;
+                continue 2;
             }
 
             if ($tokens[$nextContent]['code'] !== T_WHITESPACE) {
@@ -200,7 +200,7 @@ class Squiz_Sniffs_Classes_ClassDeclarationSniff extends PSR2_Sniffs_Classes_Cla
                     $phpcsFile->fixer->beginChangeset();
                     for ($i = ($closeBrace + 1); $i < $nextContent; $i++) {
                         if ($tokens[$i]['line'] <= ($tokens[$closeBrace]['line'] + 1)) {
-                            continue;
+                            continue 2;
                         } else if ($tokens[$i]['line'] === $tokens[$nextContent]['line']) {
                             break;
                         }
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/BlockCommentSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/BlockCommentSniff.php
index 3e8ab73b1..d06824264 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/BlockCommentSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/BlockCommentSniff.php
@@ -259,17 +259,17 @@ class Squiz_Sniffs_Commenting_BlockCommentSniff implements PHP_CodeSniffer_Sniff
             $leadingSpace = (strlen($tokens[$line]['content']) - strlen(ltrim($tokens[$line]['content'])));
             // First and last lines (comment opener and closer) are handled separately.
             if ($line === $commentLines[(count($commentLines) - 1)] || $line === $commentLines[0]) {
-                continue;
+                continue 2;
             }
 
             // First comment line was handled above.
             if ($line === $commentLines[1]) {
-                continue;
+                continue 2;
             }
 
             // If it's empty, continue.
             if (trim($tokens[$line]['content']) === '') {
-                continue;
+                continue 2;
             }
 
             if ($leadingSpace < $starColumn) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/DocCommentAlignmentSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/DocCommentAlignmentSniff.php
index cab7847a7..35d42c95f 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/DocCommentAlignmentSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/DocCommentAlignmentSniff.php
@@ -106,14 +106,14 @@ class Squiz_Sniffs_Commenting_DocCommentAlignmentSniff implements PHP_CodeSniffe
             if ($tokens[$i]['code'] !== T_DOC_COMMENT_STAR
                 && $tokens[$i]['code'] !== T_DOC_COMMENT_CLOSE_TAG
             ) {
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] === T_DOC_COMMENT_CLOSE_TAG) {
                 // Can't process the close tag if it is not the first thing on the line.
                 $prev = $phpcsFile->findPrevious(T_DOC_COMMENT_WHITESPACE, ($i - 1), $stackPtr, true);
                 if ($tokens[$prev]['line'] === $tokens[$i]['line']) {
-                    continue;
+                    continue 2;
                 }
             }
 
@@ -135,12 +135,12 @@ class Squiz_Sniffs_Commenting_DocCommentAlignmentSniff implements PHP_CodeSniffe
             }
 
             if ($tokens[$i]['code'] !== T_DOC_COMMENT_STAR) {
-                continue;
+                continue 2;
             }
 
             if ($tokens[($i + 2)]['line'] !== $tokens[$i]['line']) {
                 // Line is empty.
-                continue;
+                continue 2;
             }
 
             if ($tokens[($i + 1)]['code'] !== T_DOC_COMMENT_WHITESPACE) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FileCommentSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FileCommentSniff.php
index d3c7f3d39..5ad2c963d 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FileCommentSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FileCommentSniff.php
@@ -150,7 +150,7 @@ class Squiz_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
             $foundTags[] = $name;
 
             if ($isRequired === false) {
-                continue;
+                continue 2;
             }
 
             $string = $phpcsFile->findNext(T_DOC_COMMENT_STRING, $tag, $commentEnd);
@@ -158,7 +158,7 @@ class Squiz_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
                 $error = 'Content missing for %s tag in file comment';
                 $data  = array($name);
                 $phpcsFile->addError($error, $tag, 'Empty'.ucfirst(substr($name, 1)).'Tag', $data);
-                continue;
+                continue 2;
             }
 
             if ($name === '@author') {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php
index 3cea94490..293f0e05a 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php
@@ -128,7 +128,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
                                 || $tokens[$returnToken]['code'] === T_ANON_CLASS
                             ) {
                                 $returnToken = $tokens[$returnToken]['scope_closer'];
-                                continue;
+                                continue 2;
                             }
 
                             if ($tokens[$returnToken]['code'] === T_RETURN
@@ -193,7 +193,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
         $throws = array();
         foreach ($tokens[$commentStart]['comment_tags'] as $pos => $tag) {
             if ($tokens[$tag]['content'] !== '@throws') {
-                continue;
+                continue 2;
             }
 
             $exception = null;
@@ -271,7 +271,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
         $maxVar  = 0;
         foreach ($tokens[$commentStart]['comment_tags'] as $pos => $tag) {
             if ($tokens[$tag]['content'] !== '@param') {
-                continue;
+                continue 2;
             }
 
             $type         = '';
@@ -371,7 +371,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
         foreach ($params as $pos => $param) {
             // If the type is empty, the whole line is empty.
             if ($param['type'] === '') {
-                continue;
+                continue 2;
             }
 
             // Check the param type value.
@@ -383,7 +383,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
                 $suggestedTypeNames[] = $suggestedName;
 
                 if (count($typeNames) > 1) {
-                    continue;
+                    continue 2;
                 }
 
                 // Check type hint for array and custom type.
@@ -478,7 +478,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
                         if ($lineNum === 0
                             || $param['commentLines'][$lineNum]['indent'] === 0
                         ) {
-                            continue;
+                            continue 2;
                         }
 
                         $diff      = (strlen($param['type']) - strlen($suggestedType));
@@ -494,7 +494,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
             }//end if
 
             if ($param['var'] === '') {
-                continue;
+                continue 2;
             }
 
             $foundParams[] = $param['var'];
@@ -529,7 +529,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
             }//end if
 
             if ($param['comment'] === '') {
-                continue;
+                continue 2;
             }
 
             // Check number of spaces after the var name.
@@ -601,7 +601,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
                     if ($lineNum === 0
                         || $param['commentLines'][$lineNum]['indent'] === 0
                     ) {
-                        continue;
+                        continue 2;
                     }
 
                     $diff      = ($param['type_space'] - $spaces);
@@ -656,7 +656,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
                     if ($lineNum === 0
                         || $param['commentLines'][$lineNum]['indent'] === 0
                     ) {
-                        continue;
+                        continue 2;
                     }
 
                     $diff      = ($param['var_space'] - $spaces);
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentThrowTagSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentThrowTagSniff.php
index f1c8c41f2..bf03ce893 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentThrowTagSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentThrowTagSniff.php
@@ -212,7 +212,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentThrowTagSniff extends PHP_CodeSniff
         $commentStart = $tokens[$commentEnd]['comment_opener'];
         foreach ($tokens[$commentStart]['comment_tags'] as $tag) {
             if ($tokens[$tag]['content'] !== '@throws') {
-                continue;
+                continue 2;
             }
 
             if ($tokens[($tag + 2)]['code'] === T_DOC_COMMENT_STRING) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/ControlSignatureSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/ControlSignatureSniff.php
index 6dd3263ae..4f5b7dc7e 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/ControlSignatureSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/ControlSignatureSniff.php
@@ -165,7 +165,7 @@ class Squiz_Sniffs_ControlStructures_ControlSignatureSniff implements PHP_CodeSn
                     || ($code === T_INLINE_HTML
                     && trim($tokens[$next]['content']) === '')
                 ) {
-                    continue;
+                    continue 2;
                 }
 
                 // Skip all empty tokens on the same line as the opener.
@@ -173,7 +173,7 @@ class Squiz_Sniffs_ControlStructures_ControlSignatureSniff implements PHP_CodeSn
                     && (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$code]) === true
                     || $code === T_CLOSE_TAG)
                 ) {
-                    continue;
+                    continue 2;
                 }
 
                 // We found the first bit of a code, or a comment on the
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/SwitchDeclarationSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/SwitchDeclarationSniff.php
index acfbdf359..640e51e14 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/SwitchDeclarationSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/ControlStructures/SwitchDeclarationSniff.php
@@ -91,7 +91,7 @@ class Squiz_Sniffs_ControlStructures_SwitchDeclarationSniff implements PHP_CodeS
             // Skip nested SWITCH statements; they are handled on their own.
             if ($tokens[$nextCase]['code'] === T_SWITCH) {
                 $nextCase = $tokens[$nextCase]['scope_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$nextCase]['code'] === T_DEFAULT) {
@@ -150,7 +150,7 @@ class Squiz_Sniffs_ControlStructures_SwitchDeclarationSniff implements PHP_CodeS
             if (isset($tokens[$nextCase]['scope_opener']) === false) {
                 $error = 'Possible parse error: CASE missing opening colon';
                 $phpcsFile->addWarning($error, $nextCase, 'MissingColon');
-                continue;
+                continue 2;
             }
 
             $opener = $tokens[$nextCase]['scope_opener'];
@@ -219,7 +219,7 @@ class Squiz_Sniffs_ControlStructures_SwitchDeclarationSniff implements PHP_CodeS
                                     }
 
                                     if ($tokens[$i]['line'] === $tokens[$semicolon]['line']) {
-                                        continue;
+                                        continue 2;
                                     }
 
                                     $phpcsFile->fixer->replaceToken($i, '');
@@ -261,7 +261,7 @@ class Squiz_Sniffs_ControlStructures_SwitchDeclarationSniff implements PHP_CodeS
                         for ($i = ($tokens[$nextCase]['scope_opener'] + 1); $i < $nextBreak; $i++) {
                             if ($tokens[$i]['code'] === T_CASE) {
                                 $i = $tokens[$i]['scope_opener'];
-                                continue;
+                                continue 2;
                             }
 
                             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$i]['code']]) === false) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Debug/JSLintSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Debug/JSLintSniff.php
index 4e3e6d14f..2da91df09 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Debug/JSLintSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Debug/JSLintSniff.php
@@ -79,7 +79,7 @@ class Squiz_Sniffs_Debug_JSLintSniff implements PHP_CodeSniffer_Sniff
                 $matches    = array();
                 $numMatches = preg_match('/Lint at line ([0-9]+).*:(.*)$/', $finding, $matches);
                 if ($numMatches === 0) {
-                    continue;
+                    continue 2;
                 }
 
                 $line    = (int) $matches[1];
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Formatting/OperatorBracketSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Formatting/OperatorBracketSniff.php
index 6c923795f..d47436593 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Formatting/OperatorBracketSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Formatting/OperatorBracketSniff.php
@@ -165,7 +165,7 @@ class Squiz_Sniffs_Formatting_OperatorBracketSniff implements PHP_CodeSniffer_Sn
                     // For example, ceil($one / $two).
                     for ($prev = ($stackPtr - 1); $prev > $bracket; $prev--) {
                         if (in_array($tokens[$prev]['code'], $allowed) === true) {
-                            continue;
+                            continue 2;
                         }
 
                         if ($tokens[$prev]['code'] === T_CLOSE_PARENTHESIS) {
@@ -181,7 +181,7 @@ class Squiz_Sniffs_Formatting_OperatorBracketSniff implements PHP_CodeSniffer_Sn
 
                     for ($next = ($stackPtr + 1); $next < $endBracket; $next++) {
                         if (in_array($tokens[$next]['code'], $allowed) === true) {
-                            continue;
+                            continue 2;
                         }
 
                         if ($tokens[$next]['code'] === T_OPEN_PARENTHESIS) {
@@ -209,7 +209,7 @@ class Squiz_Sniffs_Formatting_OperatorBracketSniff implements PHP_CodeSniffer_Sn
                     // These are two open parenthesis in a row. If the current
                     // one doesn't enclose the operator, go to the previous one.
                     if ($endBracket < $stackPtr) {
-                        continue;
+                        continue 2;
                     }
                 }
 
@@ -303,17 +303,17 @@ class Squiz_Sniffs_Formatting_OperatorBracketSniff implements PHP_CodeSniffer_Sn
                 || isset(PHP_CodeSniffer_Tokens::$castTokens[$tokens[$before]['code']]) === true
                 || isset($allowed[$tokens[$before]['code']]) === true
             ) {
-                continue;
+                continue 2;
             }
 
             if ($tokens[$before]['code'] === T_CLOSE_PARENTHESIS) {
                 $before = $tokens[$before]['parenthesis_opener'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$before]['code'] === T_CLOSE_SQUARE_BRACKET) {
                 $before = $tokens[$before]['bracket_opener'];
-                continue;
+                continue 2;
             }
 
             break;
@@ -334,17 +334,17 @@ class Squiz_Sniffs_Formatting_OperatorBracketSniff implements PHP_CodeSniffer_Sn
                 || isset(PHP_CodeSniffer_Tokens::$castTokens[$tokens[$after]['code']]) === true
                 || isset($allowed[$tokens[$after]['code']]) === true
             ) {
-                continue;
+                continue 2;
             }
 
             if ($tokens[$after]['code'] === T_OPEN_PARENTHESIS) {
                 $after = $tokens[$after]['parenthesis_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$after]['code'] === T_OPEN_SQUARE_BRACKET) {
                 $after = $tokens[$after]['bracket_closer'];
-                continue;
+                continue 2;
             }
 
             break;
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Functions/MultiLineFunctionDeclarationSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Functions/MultiLineFunctionDeclarationSniff.php
index 749a1d943..71006f21c 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Functions/MultiLineFunctionDeclarationSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Functions/MultiLineFunctionDeclarationSniff.php
@@ -192,16 +192,16 @@ class Squiz_Sniffs_Functions_MultiLineFunctionDeclarationSniff extends PEAR_Snif
             // Skip brackets, like arrays, as they can contain commas.
             if (isset($tokens[$i]['bracket_opener']) === true) {
                 $i = $tokens[$i]['bracket_closer'];
-                continue;
+                continue 2;
             }
 
             if (isset($tokens[$i]['parenthesis_opener']) === true) {
                 $i = $tokens[$i]['parenthesis_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$i]['code'] !== T_COMMA) {
-                continue;
+                continue 2;
             }
 
             $next = $phpcsFile->findNext(T_WHITESPACE, ($i + 1), null, true);
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/NamingConventions/ValidVariableNameSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/NamingConventions/ValidVariableNameSniff.php
index aa31ce388..49a314b88 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/NamingConventions/ValidVariableNameSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/NamingConventions/ValidVariableNameSniff.php
@@ -217,7 +217,7 @@ class Squiz_Sniffs_NamingConventions_ValidVariableNameSniff extends PHP_CodeSnif
             foreach ($matches[1] as $varName) {
                 // If it's a php reserved var, then its ok.
                 if (in_array($varName, $phpReservedVars) === true) {
-                    continue;
+                    continue 2;
                 }
 
                 if (PHP_CodeSniffer::isCamelCaps($varName, false, true, false) === false) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowMultipleAssignmentsSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowMultipleAssignmentsSniff.php
index 105f46319..95cc84edf 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowMultipleAssignmentsSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowMultipleAssignmentsSniff.php
@@ -79,12 +79,12 @@ class Squiz_Sniffs_PHP_DisallowMultipleAssignmentsSniff implements PHP_CodeSniff
             // Skip brackets.
             if (isset($tokens[$varToken]['parenthesis_opener']) === true && $tokens[$varToken]['parenthesis_opener'] < $varToken) {
                 $varToken = $tokens[$varToken]['parenthesis_opener'];
-                continue;
+                continue 2;
             }
 
             if (isset($tokens[$varToken]['bracket_opener']) === true) {
                 $varToken = $tokens[$varToken]['bracket_opener'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$varToken]['code'] === T_SEMICOLON) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowSizeFunctionsInLoopsSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowSizeFunctionsInLoopsSniff.php
index 5c146f4cb..31e772970 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowSizeFunctionsInLoopsSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/PHP/DisallowSizeFunctionsInLoopsSniff.php
@@ -102,14 +102,14 @@ class Squiz_Sniffs_PHP_DisallowSizeFunctionsInLoopsSniff implements PHP_CodeSnif
                     // Needs to be in the form object.function to be valid.
                     $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($i - 1), null, true);
                     if ($prev === false || $tokens[$prev]['code'] !== T_OBJECT_OPERATOR) {
-                        continue;
+                        continue 2;
                     }
 
                     $functionName = 'object.'.$functionName;
                 } else {
                     // Make sure it isn't a member var.
                     if ($tokens[($i - 1)]['code'] === T_OBJECT_OPERATOR) {
-                        continue;
+                        continue 2;
                     }
 
                     $functionName .= '()';
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/PHP/EmbeddedPhpSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/PHP/EmbeddedPhpSniff.php
index 71bedc839..981204dab 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/PHP/EmbeddedPhpSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/PHP/EmbeddedPhpSniff.php
@@ -145,7 +145,7 @@ class Squiz_Sniffs_PHP_EmbeddedPhpSniff implements PHP_CodeSniffer_Sniff
                             if ($tokens[$i]['line'] === $tokens[$firstContent]['line']
                                 || $tokens[$i]['line'] === $tokens[$stackPtr]['line']
                             ) {
-                                continue;
+                                continue 2;
                             }
 
                             $phpcsFile->fixer->replaceToken($i, '');
@@ -204,7 +204,7 @@ class Squiz_Sniffs_PHP_EmbeddedPhpSniff implements PHP_CodeSniffer_Sniff
             // Find the first token on the first non-empty line we find.
             for ($first = ($stackPtr - 1); $first > 0; $first--) {
                 if ($tokens[$first]['line'] === $tokens[$stackPtr]['line']) {
-                    continue;
+                    continue 2;
                 } else if (trim($tokens[$first]['content']) !== '') {
                     $first = $phpcsFile->findFirstOnLine(array(), $first, true);
                     break;
@@ -288,7 +288,7 @@ class Squiz_Sniffs_PHP_EmbeddedPhpSniff implements PHP_CodeSniffer_Sniff
                     if ($tokens[$i]['line'] === $tokens[$lastContent]['line']
                         || $tokens[$i]['line'] === $tokens[$closingTag]['line']
                     ) {
-                        continue;
+                        continue 2;
                     }
 
                     $phpcsFile->fixer->replaceToken($i, '');
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/PHP/NonExecutableCodeSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/PHP/NonExecutableCodeSniff.php
index 8b44e4817..969779715 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/PHP/NonExecutableCodeSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/PHP/NonExecutableCodeSniff.php
@@ -74,9 +74,9 @@ class Squiz_Sniffs_PHP_NonExecutableCodeSniff implements PHP_CodeSniffer_Sniff
         for ($i = ($stackPtr - 1); $i > 0; $i--) {
             if ($tokens[$i]['code'] === T_CLOSE_PARENTHESIS) {
                 $i = $tokens[$i]['parenthesis_opener'];
-                continue;
+                continue 2;
             } else if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$i]['code']]) === true) {
-                continue;
+                continue 2;
             }
 
             break;
@@ -127,7 +127,7 @@ class Squiz_Sniffs_PHP_NonExecutableCodeSniff implements PHP_CodeSniffer_Sniff
                     $lastLine = $tokens[$end]['line'];
                     for ($i = ($stackPtr + 1); $i < $next; $i++) {
                         if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$i]['code']]) === true) {
-                            continue;
+                            continue 2;
                         }
 
                         $line = $tokens[$i]['line'];
@@ -223,12 +223,12 @@ class Squiz_Sniffs_PHP_NonExecutableCodeSniff implements PHP_CodeSniffer_Sniff
 
             if ($tokens[$start]['code'] === T_OPEN_PARENTHESIS) {
                 $start = $tokens[$start]['parenthesis_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$start]['code'] === T_OPEN_CURLY_BRACKET) {
                 $start = $tokens[$start]['bracket_closer'];
-                continue;
+                continue 2;
             }
 
             if ($tokens[$start]['code'] === T_SEMICOLON) {
@@ -241,7 +241,7 @@ class Squiz_Sniffs_PHP_NonExecutableCodeSniff implements PHP_CodeSniffer_Sniff
             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$i]['code']]) === true
                 || isset(PHP_CodeSniffer_Tokens::$bracketTokens[$tokens[$i]['code']]) === true
             ) {
-                continue;
+                continue 2;
             }
 
             // Skip whole functions and classes/interfaces because they are not
@@ -251,7 +251,7 @@ class Squiz_Sniffs_PHP_NonExecutableCodeSniff implements PHP_CodeSniffer_Sniff
                 || $tokens[$i]['code'] === T_INTERFACE
             ) {
                 $i = $tokens[$i]['scope_closer'];
-                continue;
+                continue 2;
             }
 
             $line = $tokens[$i]['line'];
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/ControlStructureSpacingSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/ControlStructureSpacingSniff.php
index fb0914a1e..a087ac909 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/ControlStructureSpacingSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/ControlStructureSpacingSniff.php
@@ -203,7 +203,7 @@ class Squiz_Sniffs_WhiteSpace_ControlStructureSpacingSniff implements PHP_CodeSn
                     $i = ($scopeCloser - 1);
                     for ($i = ($scopeCloser - 1); $i > $lastContent; $i--) {
                         if ($tokens[$i]['line'] === $tokens[$scopeCloser]['line']) {
-                            continue;
+                            continue 2;
                         }
 
                         if ($tokens[$i]['line'] === $tokens[$lastContent]['line']) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/FunctionSpacingSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/FunctionSpacingSniff.php
index 7a4dcc44b..74fe32e6f 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/FunctionSpacingSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/FunctionSpacingSniff.php
@@ -137,7 +137,7 @@ class Squiz_Sniffs_WhiteSpace_FunctionSpacingSniff implements PHP_CodeSniffer_Sn
         $prevLineToken = null;
         for ($i = $stackPtr; $i > 0; $i--) {
             if (strpos($tokens[$i]['content'], $phpcsFile->eolChar) === false) {
-                continue;
+                continue 2;
             } else {
                 $prevLineToken = $i;
                 break;
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/MemberVarSpacingSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/MemberVarSpacingSniff.php
index f5cc07c1d..5023308da 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/MemberVarSpacingSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/WhiteSpace/MemberVarSpacingSniff.php
@@ -113,7 +113,7 @@ class Squiz_Sniffs_WhiteSpace_MemberVarSpacingSniff extends PHP_CodeSniffer_Stan
             $phpcsFile->fixer->beginChangeset();
             for ($i = ($prev + 1); $i < $first; $i++) {
                 if ($tokens[$i]['line'] === $tokens[$prev]['line']) {
-                    continue;
+                    continue 2;
                 }
 
                 if ($tokens[$i]['line'] === $tokens[$first]['line']) {
diff --git a/CodeSniffer/Standards/Squiz/Tests/PHP/DisallowComparisonAssignmentUnitTest.inc b/CodeSniffer/Standards/Squiz/Tests/PHP/DisallowComparisonAssignmentUnitTest.inc
index 72f6e6d66..3e54a191d 100644
--- a/CodeSniffer/Standards/Squiz/Tests/PHP/DisallowComparisonAssignmentUnitTest.inc
+++ b/CodeSniffer/Standards/Squiz/Tests/PHP/DisallowComparisonAssignmentUnitTest.inc
@@ -39,12 +39,12 @@ $var = myFunction(
 
 for ($node = $fieldsTag->nextSibling; $node; $node = $node->nextSibling) {
     if ($node->nodeType !== XML_ELEMENT_NODE) {
-        continue;
+        continue 2;
     }
 
     for ($node = $fields->nextSibling; $node; $node = $node->nextSibling) {
         if ($node->nodeType !== XML_ELEMENT_NODE) {
-            continue;
+            continue 2;
         }
     }
 }
diff --git a/CodeSniffer/Standards/Squiz/Tests/PHP/NonExecutableCodeUnitTest.inc b/CodeSniffer/Standards/Squiz/Tests/PHP/NonExecutableCodeUnitTest.inc
index 951f336bd..625e2987b 100644
--- a/CodeSniffer/Standards/Squiz/Tests/PHP/NonExecutableCodeUnitTest.inc
+++ b/CodeSniffer/Standards/Squiz/Tests/PHP/NonExecutableCodeUnitTest.inc
@@ -38,10 +38,10 @@ function myFunction($var)
 
 foreach ($vars as $var) {
     if ($something === TRUE) {
-        continue;
+        continue 2;
         break;
     } else {
-        continue;
+        continue 2;
         echo 'hi';
     }
 
@@ -61,7 +61,7 @@ switch ($lowerVarType) {
 while ($line=fgets($fp,2*1024*1024))
 {
     if (!preg_match("/^<([a-z0-9_]+)/",$line,$matches))
-    continue;
+    continue 2;
     print $line;
 }
 
diff --git a/CodeSniffer/Standards/Zend/Sniffs/Debug/CodeAnalyzerSniff.php b/CodeSniffer/Standards/Zend/Sniffs/Debug/CodeAnalyzerSniff.php
index 25590372d..6cdbe4e9d 100644
--- a/CodeSniffer/Standards/Zend/Sniffs/Debug/CodeAnalyzerSniff.php
+++ b/CodeSniffer/Standards/Zend/Sniffs/Debug/CodeAnalyzerSniff.php
@@ -91,7 +91,7 @@ class Zend_Sniffs_Debug_CodeAnalyzerSniff implements PHP_CodeSniffer_Sniff
                 // So skip these...
                 $res = preg_match("/^.+\(line ([0-9]+)\):(.+)$/", $finding, $regs);
                 if (empty($regs) === true || $res === false) {
-                    continue;
+                    continue 2;
                 }
 
                 $phpcsFile->addWarningOnLine(trim($regs[2]), $regs[1], 'ExternalTool');
diff --git a/CodeSniffer/Standards/Zend/Sniffs/NamingConventions/ValidVariableNameSniff.php b/CodeSniffer/Standards/Zend/Sniffs/NamingConventions/ValidVariableNameSniff.php
index 03785e86c..ec6615f2f 100644
--- a/CodeSniffer/Standards/Zend/Sniffs/NamingConventions/ValidVariableNameSniff.php
+++ b/CodeSniffer/Standards/Zend/Sniffs/NamingConventions/ValidVariableNameSniff.php
@@ -224,7 +224,7 @@ class Zend_Sniffs_NamingConventions_ValidVariableNameSniff extends PHP_CodeSniff
             foreach ($matches[1] as $varName) {
                 // If it's a php reserved var, then its ok.
                 if (in_array($varName, $phpReservedVars) === true) {
-                    continue;
+                    continue 2;
                 }
 
                 if (PHP_CodeSniffer::isCamelCaps($varName, false, true, false) === false) {
diff --git a/CodeSniffer/Tokenizers/CSS.php b/CodeSniffer/Tokenizers/CSS.php
index 8e4ba35b0..026d79df3 100644
--- a/CodeSniffer/Tokenizers/CSS.php
+++ b/CodeSniffer/Tokenizers/CSS.php
@@ -131,7 +131,7 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
                                              );
 
                 $newStackPtr++;
-                continue;
+                continue 2;
             }//end if
 
             if ($token['code'] === T_GOTO_LABEL) {
@@ -149,7 +149,7 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
                                               'content' => ':',
                                              );
                 $newStackPtr++;
-                continue;
+                continue 2;
             }
 
             if ($token['code'] === T_FUNCTION) {
@@ -161,7 +161,7 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
                                              );
 
                 $newStackPtr++;
-                continue;
+                continue 2;
             }
 
             if ($token['code'] === T_COMMENT
@@ -246,7 +246,7 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
                 array_splice($tokens, $stackPtr, 1, $commentTokens);
                 $numTokens = count($tokens);
                 $stackPtr--;
-                continue;
+                continue 2;
             }//end if
 
             if ($token['code'] === T_COMMENT
@@ -390,7 +390,7 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
 
                     // Needs to be in the format "url(" for it to be a URL.
                     if ($finalTokens[$x]['code'] !== T_OPEN_PARENTHESIS) {
-                        continue;
+                        continue 2;
                     }
 
                     // Make sure the content isn't empty.
@@ -401,7 +401,7 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
                     }
 
                     if ($finalTokens[$y]['code'] === T_CLOSE_PARENTHESIS) {
-                        continue;
+                        continue 2;
                     }
 
                     if (PHP_CODESNIFFER_VERBOSITY > 1) {
diff --git a/CodeSniffer/Tokenizers/Comment.php b/CodeSniffer/Tokenizers/Comment.php
index 88885bdd3..ce2adb152 100644
--- a/CodeSniffer/Tokenizers/Comment.php
+++ b/CodeSniffer/Tokenizers/Comment.php
@@ -122,7 +122,7 @@ class PHP_CodeSniffer_Tokenizers_Comment
             }
 
             if ($string === '') {
-                continue;
+                continue 2;
             }
 
             if ($string[$char] === '*') {
diff --git a/CodeSniffer/Tokenizers/JS.php b/CodeSniffer/Tokenizers/JS.php
index 1dc82e4a4..34cdbd03d 100644
--- a/CodeSniffer/Tokenizers/JS.php
+++ b/CodeSniffer/Tokenizers/JS.php
@@ -390,7 +390,7 @@ class PHP_CodeSniffer_Tokenizers_JS
                         $preStringBuffer = '';
                         $inString        = '';
                         $stringChar      = null;
-                        continue;
+                        continue 2;
                     }//end if
                 } else if ($inString === '') {
                     $inString        = $char;
@@ -427,7 +427,7 @@ class PHP_CodeSniffer_Tokenizers_JS
             // so if we are in a string, we can continue here now
             // that the current char is in the buffer.
             if ($inString !== '') {
-                continue;
+                continue 2;
             }
 
             // Special case for T_DIVIDE which can actually be
@@ -456,7 +456,7 @@ class PHP_CodeSniffer_Tokenizers_JS
                     $i           = $regex['end'];
                     $buffer      = '';
                     $cleanBuffer = false;
-                    continue;
+                    continue 2;
                 }//end if
             }//end if
 
@@ -784,7 +784,7 @@ class PHP_CodeSniffer_Tokenizers_JS
                         $newStackPtr++;
                     }
 
-                    continue;
+                    continue 2;
                 } else {
                     // Save the new content in the current token so
                     // the code below can chop it up on newlines.
@@ -845,7 +845,7 @@ class PHP_CodeSniffer_Tokenizers_JS
                     }
 
                     $stackPtr--;
-                    continue;
+                    continue 2;
                 } else {
                     $stackPtr = $oldStackPtr;
                 }
@@ -855,7 +855,7 @@ class PHP_CodeSniffer_Tokenizers_JS
             if ($token['code'] === T_OBJECT_OPERATOR) {
                 for ($i = ($stackPtr + 1); $i < $numTokens; $i++) {
                     if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$i]['code']]) === true) {
-                        continue;
+                        continue 2;
                     }
 
                     if ($tokens[$i]['code'] !== T_PROTOTYPE
@@ -1069,7 +1069,7 @@ class PHP_CodeSniffer_Tokenizers_JS
 
                     for ($x = ($tokens[$i]['scope_opener'] + 1); $x < $tokens[$i]['scope_closer']; $x++) {
                         if (isset($tokens[$x]['conditions'][$i]) === false) {
-                            continue;
+                            continue 2;
                         }
 
                         $tokens[$x]['conditions'][$i] = T_CLOSURE;
@@ -1081,7 +1081,7 @@ class PHP_CodeSniffer_Tokenizers_JS
                     }
                 }//end if
 
-                continue;
+                continue 2;
             } else if ($tokens[$i]['code'] === T_OPEN_CURLY_BRACKET
                 && isset($tokens[$i]['scope_condition']) === false
                 && isset($tokens[$i]['bracket_closer']) === true
@@ -1116,7 +1116,7 @@ class PHP_CodeSniffer_Tokenizers_JS
                 // If it is a scope opener, it belongs to a
                 // DEFAULT or CASE statement.
                 if (isset($tokens[$i]['scope_condition']) === true) {
-                    continue;
+                    continue 2;
                 }
 
                 // Make sure this is not part of an inline IF statement.
@@ -1146,7 +1146,7 @@ class PHP_CodeSniffer_Tokenizers_JS
                 if ($tokens[$label]['code'] !== T_STRING
                     && $tokens[$label]['code'] !== T_CONSTANT_ENCAPSED_STRING
                 ) {
-                    continue;
+                    continue 2;
                 }
 
                 if (empty($classStack) === false) {
diff --git a/CodeSniffer/Tokenizers/PHP.php b/CodeSniffer/Tokenizers/PHP.php
index 9d887b116..215ede84c 100644
--- a/CodeSniffer/Tokenizers/PHP.php
+++ b/CodeSniffer/Tokenizers/PHP.php
@@ -409,7 +409,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     $newStackPtr++;
                 }
 
-                continue;
+                continue 2;
             }
 
             /*
@@ -484,7 +484,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                 }
 
                 // Continue, as we're done with this token.
-                continue;
+                continue 2;
             }//end if
 
             /*
@@ -538,7 +538,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     $finalTokens[$newStackPtr]['code'] = T_STRING;
                     $finalTokens[$newStackPtr]['type'] = 'T_STRING';
                     $newStackPtr++;
-                    continue;
+                    continue 2;
                 }
 
                 $stackPtr = $i;
@@ -584,7 +584,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                 $newStackPtr++;
 
                 // Continue, as we're done with this token.
-                continue;
+                continue 2;
             }//end if
 
             /*
@@ -608,7 +608,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                 $newStackPtr++;
                 $stackPtr += 2;
-                continue;
+                continue 2;
             }
 
             /*
@@ -630,7 +630,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                 $newStackPtr++;
                 $stackPtr++;
-                continue;
+                continue 2;
             }
 
             /*
@@ -653,7 +653,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                 $newStackPtr++;
                 $stackPtr++;
-                continue;
+                continue 2;
             }
 
             /*
@@ -689,7 +689,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     $stackPtr++;
                 }
 
-                continue;
+                continue 2;
             }
 
             /*
@@ -711,7 +711,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                 $newStackPtr++;
                 $stackPtr++;
-                continue;
+                continue 2;
             }
 
             /*
@@ -744,7 +744,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                 $finalTokens[$newStackPtr] = $newToken;
                 $newStackPtr++;
-                continue;
+                continue 2;
             }//end if
 
             /*
@@ -769,7 +769,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                 $finalTokens[$newStackPtr] = $newToken;
 
                 $newStackPtr++;
-                continue;
+                continue 2;
             }
 
             /*
@@ -813,7 +813,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                 $newStackPtr++;
                 $stackPtr++;
-                continue;
+                continue 2;
             }
 
             /*
@@ -837,7 +837,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                 }
 
                 $newStackPtr++;
-                continue;
+                continue 2;
             }
 
             /*
@@ -883,7 +883,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                     $newStackPtr++;
                     $stackPtr++;
-                    continue;
+                    continue 2;
                 }
             }//end if
 
@@ -922,7 +922,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                 }
 
                 $newStackPtr++;
-                continue;
+                continue 2;
             }//end if
 
             /*
@@ -942,7 +942,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                 }
 
                 $newStackPtr++;
-                continue;
+                continue 2;
             }//end if
 
             /*
@@ -1011,7 +1011,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                         }
 
                         $newStackPtr++;
-                        continue;
+                        continue 2;
                     }//end if
                 }//end if
 
@@ -1178,7 +1178,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                         for ($x = ($tokens[$i]['scope_opener'] + 1); $x < $tokens[$i]['scope_closer']; $x++) {
                             if (isset($tokens[$x]['conditions'][$i]) === false) {
-                                continue;
+                                continue 2;
                             }
 
                             $tokens[$x]['conditions'][$i] = T_CLOSURE;
@@ -1201,11 +1201,11 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                     if ($tokenAfterReturnTypeHint === null) {
                         // Probably a syntax error.
-                        continue;
+                        continue 2;
                     }
                 } else {
                     // Probably a syntax error.
-                    continue;
+                    continue 2;
                 }//end if
 
                 /*
@@ -1230,7 +1230,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     }
                 }
 
-                continue;
+                continue 2;
             } else if ($tokens[$i]['code'] === T_CLASS && isset($tokens[$i]['scope_opener']) === true) {
                 /*
                     Detect anonymous classes and assign them a different token.
@@ -1256,7 +1256,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
 
                     for ($x = ($tokens[$i]['scope_opener'] + 1); $x < $tokens[$i]['scope_closer']; $x++) {
                         if (isset($tokens[$x]['conditions'][$i]) === false) {
-                            continue;
+                            continue 2;
                         }
 
                         $tokens[$x]['conditions'][$i] = T_ANON_CLASS;
@@ -1267,10 +1267,10 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     }
                 }
 
-                continue;
+                continue 2;
             } else if ($tokens[$i]['code'] === T_OPEN_SQUARE_BRACKET) {
                 if (isset($tokens[$i]['bracket_closer']) === false) {
-                    continue;
+                    continue 2;
                 }
 
                 // Unless there is a variable or a bracket before this token,
@@ -1319,7 +1319,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     }
                 }
 
-                continue;
+                continue 2;
             } else if ($tokens[$i]['code'] === T_STATIC) {
                 for ($x = ($i - 1); $x > 0; $x--) {
                     if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$x]['code']]) === false) {
@@ -1337,7 +1337,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     }
                 }
 
-                continue;
+                continue 2;
             } else if ($tokens[$i]['code'] === T_ECHO && $tokens[$i]['content'] === '<?=') {
                 // HHVM tokenizes <?= as T_ECHO but it should be T_OPEN_TAG_WITH_ECHO.
                 $tokens[$i]['code'] = T_OPEN_TAG_WITH_ECHO;
@@ -1399,7 +1399,7 @@ class PHP_CodeSniffer_Tokenizers_PHP
                 || isset($tokens[$i]['scope_opener']) === false
             ) {
                 // Only interested in CASE and DEFAULT statements from here on in.
-                continue;
+                continue 2;
             }
 
             $scopeOpener = $tokens[$i]['scope_opener'];
@@ -1430,14 +1430,14 @@ class PHP_CodeSniffer_Tokenizers_PHP
                     echo "\t* token $i (T_CASE) on line $line closer changed from $scopeCloser ($oldType) to $newCloser ($newType)".PHP_EOL;
                 }
 
-                continue;
+                continue 2;
             }
 
             if ($tokens[$x]['code'] !== T_OPEN_CURLY_BRACKET
                 || isset($tokens[$x]['scope_condition']) === true
             ) {
                 // Not a CASE/DEFAULT with a curly brace opener.
-                continue;
+                continue 2;
             }
 
             // The closer for this CASE/DEFAULT should be the closing curly brace and
diff --git a/scripts/phpcs-svn-pre-commit b/scripts/phpcs-svn-pre-commit
index 46fc628c7..57028b547 100755
--- a/scripts/phpcs-svn-pre-commit
+++ b/scripts/phpcs-svn-pre-commit
@@ -162,13 +162,13 @@ class PHP_CodeSniffer_SVN_Hook extends PHP_CodeSniffer_CLI
         foreach (preg_split("/\v|\n/", $contents, -1, PREG_SPLIT_NO_EMPTY) as $path) {
             // No need to process folders as each changed file is checked.
             if (substr($path, -1) === '/') {
-                continue;
+                continue 2;
             }
 
             // We need to check ignore rules ourself because they are
             // not checked when processing a single file.
             if ($phpcs->shouldProcessFile($path, dirname($path)) === false) {
-                continue;
+                continue 2;
             }
 
             // Get the contents of each file, as it would be after this transaction.
diff --git a/tests/Standards/AllSniffs.php b/tests/Standards/AllSniffs.php
index 737a30159..a9f8e0405 100644
--- a/tests/Standards/AllSniffs.php
+++ b/tests/Standards/AllSniffs.php
@@ -96,14 +96,14 @@ class PHP_CodeSniffer_Standards_AllSniffs
 
             foreach ($standards as $standard) {
                 if (in_array($standard, $ignoreTestsForStandards, true)) {
-                    continue;
+                    continue 2;
                 }
 
                 $testsDir = $path.DIRECTORY_SEPARATOR.$standard.DIRECTORY_SEPARATOR.'Tests'.DIRECTORY_SEPARATOR;
 
                 if (is_dir($testsDir) === false) {
                     // No tests for this standard.
-                    continue;
+                    continue 2;
                 }
 
                 $di = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($testsDir));
@@ -111,14 +111,14 @@ class PHP_CodeSniffer_Standards_AllSniffs
                 foreach ($di as $file) {
                     // Skip hidden files.
                     if (substr($file->getFilename(), 0, 1) === '.') {
-                        continue;
+                        continue 2;
                     }
 
                     // Tests must have the extension 'php'.
                     $parts = explode('.', $file);
                     $ext   = array_pop($parts);
                     if ($ext !== 'php') {
-                        continue;
+                        continue 2;
                     }
 
                     $filePath  = $file->getPathname();
