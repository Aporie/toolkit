<?xml version="1.0" encoding="UTF-8" ?>

<project default="help">

    <!-- Import helper targets if called here directly. -->
    <import file="${phing.dir}/build.help.xml" optional="true" />

    <!-- Install Composer dependencies for the build system. -->
    <target name="platform-composer-install">
        <echo msg="Run 'composer install' in platform root." />
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.basedir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Delete the previous development build. -->
    <target name="platform-delete">
        <echo msg="Delete previous build." />
        <phingcall target="unprotect-folder">
            <property name="folder.to.unprotect" value="${platform.build.settings.dir}" />
        </phingcall>
        <echo msg="Unprotecting folder." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${platform.build.dir}" />
        </phingcall>
        <echo msg="Deleting folder." />
    </target>

    <!-- Download the platform. -->
    <target name="platform-download">
        <if>
            <available file="${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" type="file"/>
            <then>
                  <echo msg="Package platform-dev-${platform.package.reference}.tar.gz already downloaded."/>
            </then>
            <else>
                <!-- Create the destination directory if it doesn't exist. -->
                <mkdir dir="${platform.package.cachedir}" />
                <echo msg="Starting platform download. Depending on your connection this can take between 5-15 minutes. Go get some coffee."/>
                <if>
                    <http url="https://github.com/ec-europa/platform-dev/releases/download/${platform.package.reference}/platform-dev-${platform.package.reference}.tar.gz"/>
                    <then>
                        <exec command="curl -L -o ${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz https://github.com/ec-europa/platform-dev/releases/download/${platform.package.reference}/platform-dev-${platform.package.reference}.tar.gz" passthru="true"/>
                        <echo msg="Downloaded platform package reference ${platform.package.reference}"/>
                    </then>
                    <else>
                        <fail msg="Failed downloading platform package reference ${platform.package.reference}"/>
                    </else>
                </if>
            </else>
        </if>
    </target>

    <!-- Symlink the source folders for easy development. -->
    <target name="platform-link-resources">
        <rel-sym link="${platform.build.subsite.modules.custom.dir}" target="${subsite.resources.modules.dir}" />
        <rel-sym link="${platform.build.subsite.modules.features.dir}" target="${subsite.resources.features.dir}" />
        <delete dir="${platform.build.subsite.themes.dir}" includeemptydirs="true" failonerror="false" />
        <rel-sym link="${platform.build.subsite.themes.dir}" target="${subsite.resources.themes.dir}" />
        <rel-sym link="${platform.build.subsite.source.dir}" target="${subsite.resources.source.dir}" />
        <rel-sym link="${platform.build.subsite.composer.json}" target="${subsite.resources.composer.json}" />
        <rel-sym link="${platform.build.subsite.composer.lock}" target="${subsite.resources.composer.lock}" />
    </target>

    <!-- Make the development version of the subsite. -->
    <target name="platform-make" depends="platform-unpack">
        <if>
            <available file="${subsite.make}" type="file" />
            <then>
                <echo msg="Make the subsite." />
                <phingcall target="drush-make-no-core">
                    <property name="drush.make.target.file" value="${subsite.make}" />
                    <property name="drush.make.root" value="${platform.build.dir}" />
                </phingcall>
            </then>
            <else>
                <echo msg="No make file found. Skipping..." />
            </else>
        </if>
    </target>

    <!-- Unpack the platform. -->
    <target name="platform-unpack" depends="platform-download">
        <!-- Use the faster native commands on UNIX systems. -->
        <if>
            <os family="unix"/>
            <then>
                <echo msg='mkdir "${platform.build.dir}"'/>
                <exec
                    command='mkdir "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                />
                <echo msg='tar xzf "${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" -C "${platform.build.dir}"'/>
                <exec
                    command='tar xzf "${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" -C "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
            </then>
            <else>
                <untar file="${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" todir="${platform.build.dir}"/>
            </else>
        </if>
    </target>

    <!-- Update .htaccess. -->
    <target name="platform-update-htaccess">
        <if>
            <istrue value="${drupal.htaccess.append.text}" />
            <then>
                <echo msg="Appended text to htaccess." />
                <append destfile="${drupal.htaccess.path}" text="${drupal.htaccess.append.text}" />
            </then>
            <else>
                <echo msg="Appended no text to htaccess." />
            </else>
        </if>
    </target>

</project>
