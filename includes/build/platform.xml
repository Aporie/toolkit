<?xml version="1.0" encoding="UTF-8" ?>

<project default="help">

    <!-- Import helper targets if called here directly. -->
    <if>
         <available file="help.xml" />
         <then>
             <import file="help.xml" />
         </then>
     </if>

    <target
        name="build-platform-dist"
        description="Build a version of the platform intended to distribute as a release package."
        depends="
            project-platform-delete,
            platform-make-drupal,
            platform-profiles-copy,
            platform-make-profile,
            platform-resources-copy,
            project-platform-composer-install,
            project-setup-files-directory" />

    <target
        name="build-platform-dev"
        description="Build a local development version of the platform."
        depends="
            project-platform-delete,
            platform-make-drupal,
            platform-profiles-link,
            platform-make-profile,
            platform-resources-link,
            project-platform-composer-install-dev,
            test-behat-setup,
            test-behat-setup-balancer,
            test-phpunit-setup,
            test-phpcs-setup,
            build-project-htaccess,
            build-project-theme" />

    <target
        name="build-platform-dist-multisite"
        description="Build files of  platform intended for release package."
        depends="
            project-platform-delete,
            platform-make-drupal,
            platform-profiles-copy,
            platform-make-profile-all,
            platform-resources-copy,
            project-platform-composer-install" />

    <!-- Make all of the profiles in order to build a multisite platform. -->
    <target name="platform-make-profile-all">
        <!-- Loop over profiles and run platform-make-profile. -->
        <property name="profiles" value="multisite_drupal_standard,multisite_drupal_communities" />
        <foreach list="${profiles}" param="profile-name" target="platform-make-profile" />
    </target>

    <!-- Make Drupal core. -->
    <target name="platform-make-drupal">
        <!--
            Drupal core is created in a separate target because Drush make only
            allows to build in a pre-existing folder if the 'no-core' option is
            set.
        -->
        <echo msg="Make Drupal core." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${drupal.make}</param>
            <param>${platform.build.dir}</param>
            <option name="no-patch-txt"></option>
        </drush>
    </target>

    <!-- Make the platform. -->
    <target name="platform-make-profile">
        <echo msg="Make the platform." />
        <if>
            <isset property="profile-name" />
            <then>
                <property name="platform.profile.name" value="${profile-name}" override="true" />
                <property name="platform.make" value="${project.resources.dir}/${profile-name}.make" override="true" />
            </then>
        </if>
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${platform.make}</param>
            <param>${platform.build.dir}</param>
            <!-- Increasing the concurrency improves the build time by a factor of 3. -->
            <option name="concurrency">10</option>
            <option name="no-patch-txt"></option>
            <!-- This option will allow us to build inside an existing folder. -->
            <option name="no-core"></option>
            <!-- Install all contributed projects inside the chosen profile. -->
            <option name="contrib-destination">profiles/${platform.profile.name}</option>
        </drush>
    </target>

    <!-- Copy the profile folders for deploying on production. -->
    <target name="platform-profiles-copy">
        <!-- Delete the core profiles folder so it can be replaced with ours. -->
        <delete dir="${project.build.profiles.dir}" includeemptydirs="true" failonerror="true" />
        <!-- Copy our profiles folder. -->
        <copy todir="${project.build.profiles.dir}">
            <fileset dir="${project.resources.profiles.dir}">
                <include name="**" />
            </fileset>
        </copy>
        <!-- Copy common modules, themes and libraries. -->
        <copy todir="${project.build.profiles.dir}/common">
            <fileset dir="${project.resources.lib.dir}">
                <exclude name="profiles/**" />
                <include name="**" />
            </fileset>
        </copy>
    </target>

    <!-- Symlink the profile folders for easy development. -->
    <target name="platform-profiles-link">
        <!-- Delete the core profiles folder. -->
        <delete dir="${project.build.profiles.dir}" />
        <!-- Symlink our profiles folder. -->
        <symlink link="${project.build.profiles.dir}" target="${project.resources.profiles.dir}" />
   </target>

    <!-- Symlink various resources for easy development. -->
    <target name="platform-resources-link">
        <!-- Composer configuration. -->
        <symlink link="${project.build.composer.json}" target="${project.resources.composer.json}" />
        <symlink link="${project.build.composer.lock}" target="${project.resources.composer.lock}" />
        <symlink link="${project.build.favicon.ico}" target="${project.resources.favicon.ico}" />
    </target>

    <!-- Copy various resources for deploying on production. -->
    <target name="platform-resources-copy">
        <!-- Resources to copy to the website root. -->
        <copy todir="${platform.build.dir}">
            <fileset dir="${project.resources.dir}">
                <!-- Composer configuration. -->
                <include name="composer.*"></include>
                <include name="favicon.ico"></include>
            </fileset>
        </copy>
    </target>

</project>
