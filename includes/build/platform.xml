<?xml version="1.0" encoding="UTF-8" ?>

<project default="help">

    <!-- Import helper targets if called here directly. -->
    <if>
         <available file="help.xml" />
         <then>
             <import file="help.xml" />
         </then>
     </if>

    <target
        name="build-platform-dist"
        description="Build a version of the platform intended to distribute as a release package."
        depends="platform-delete, platform-make-drupal, platform-profiles-copy, platform-make-platform, platform-resources-copy, platform-composer-install, subsite-setup-files-directory" />

    <!-- Make one of the profiles in order to build a multisite platform. -->
    <target name="platform-make-multisite-platform">
        <!-- Override the location of the make file. -->
        <property name="platform.make" value="${platform.resources.dir}/${platform.profile.name}.make" override="yes" />
        <phingcall target="platform-make-platform" />
    </target>

    <target
        name="build-platform-dev"
        description="Build a local development version of the platform."
        depends="platform-delete, platform-make-drupal, platform-profiles-link, platform-make-platform, platform-resources-link, platform-composer-install-dev, test-behat-setup, test-behat-setup-balancer, test-phpunit-setup, test-phpcs-setup, platform-update-htaccess, build-europa-theme" />

    <target
        name="build-multisite-dist"
        description="Build a multisite version of the platform intended to distribute as a release package."
        depends="platform-delete, platform-make-drupal, platform-profiles-copy">

        <!-- First make the standard profile. -->
        <property name="platform.profile.name" value="multisite_drupal_standard" override="yes" />
        <phingcall target="platform-make-multisite-platform" />

        <!-- Then make the communities profile. -->
        <property name="platform.profile.name" value="multisite_drupal_communities" override="yes" />
        <phingcall target="platform-make-multisite-platform" />

        <!-- Call the remaining build targets. -->
        <phingcall target="platform-resources-copy" />
        <phingcall target="platform-composer-install" />
    </target>


    <!-- Make Drupal core. -->
    <target name="platform-make-drupal">
        <!--
            Drupal core is created in a separate target because Drush make only
            allows to build in a pre-existing folder if the 'no-core' option is
            set.
        -->
        <echo msg="Make Drupal core." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${drupal.make}</param>
            <param>${platform.build.dir}</param>
            <option name="no-patch-txt"></option>
        </drush>
    </target>

    <!-- Make the platform. -->
    <target name="platform-make-platform">
        <echo msg="Make the platform." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${platform.make}</param>
            <param>${platform.build.dir}</param>
            <!-- Increasing the concurrency improves the build time by a factor of 3. -->
            <option name="concurrency">10</option>
            <option name="no-patch-txt"></option>
            <!-- This option will allow us to build inside an existing folder. -->
            <option name="no-core"></option>
            <!-- Install all contributed projects inside the chosen profile. -->
            <option name="contrib-destination">profiles/${platform.profile.name}</option>
        </drush>
    </target>

    <!-- Copy the profile folders for deploying on production. -->
    <target name="platform-profiles-copy">
        <!-- Delete the core profiles folder so it can be replaced with ours. -->
        <delete dir="${platform.build.profiles.dir}" includeemptydirs="true" failonerror="true" />
        <!-- Copy our profiles folder. -->
        <copy todir="${platform.build.profiles.dir}">
            <fileset dir="${project.resources.profiles.dir}">
                <include name="**" />
            </fileset>
        </copy>
        <!-- Copy common modules, themes and libraries. -->
        <copy todir="${platform.build.profiles.dir}/common">
            <fileset dir="${project.resources.lib.dir}">
                <exclude name="profiles/**" />
                <include name="**" />
            </fileset>
        </copy>
    </target>

    <!-- Symlink the profile folders for easy development. -->
    <target name="platform-profiles-link">
        <!-- Delete the core profiles folder. -->
        <delete dir="${platform.build.profiles.dir}" />
        <!-- Symlink our profiles folder. -->
        <symlink link="${platform.build.profiles.dir}" target="${platform.resources.profiles.dir}" />
   </target>

    <!-- Symlink various resources for easy development. -->
    <target name="platform-resources-link">
        <!-- Composer configuration. -->
        <symlink link="${platform.build.composer.json}" target="${project.resources.composer.json}" />
        <symlink link="${platform.build.composer.lock}" target="${project.resources.composer.lock}" />
        <symlink link="${platform.build.favicon.ico}" target="${project.resources.favicon.ico}" />
    </target>

    <!-- Copy various resources for deploying on production. -->
    <target name="platform-resources-copy">
        <!-- Resources to copy to the website root. -->
        <copy todir="${platform.build.dir}">
            <fileset dir="${project.resources.dir}">
                <!-- Composer configuration. -->
                <include name="composer.*"></include>
                <include name="favicon.ico"></include>
            </fileset>
        </copy>
    </target>

    <!-- Install Composer dependencies for the build system. -->
    <target name="platform-composer-install">
        <echo msg="Run 'composer install' in platform root." />
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Install Composer dependencies, including optional development dependencies. -->
    <target name="platform-composer-install-dev">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Delete the previous development build. -->
    <target name="platform-delete">
        <echo msg="Delete previous build." />
        <phingcall target="unprotect-folder">
            <property name="folder.to.unprotect" value="${platform.build.settings.dir}" />
        </phingcall>
        <echo msg="Unprotecting folder." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${platform.build.dir}" />
        </phingcall>
        <echo msg="Deleting folder." />
    </target>

    <!-- Download the platform. -->
    <target name="platform-package-download">
        <if>
            <available file="${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" type="file"/>
            <then>
                  <echo msg="Package platform-dev-${platform.package.reference}.tar.gz already downloaded."/>
            </then>
            <else>
                <!-- Create the destination directory if it doesn't exist. -->
                <mkdir dir="${platform.package.cachedir}" />
                <echo msg="Starting platform download. Depending on your connection this can take between 5-15 minutes. Go get some coffee."/>
                <if>
                    <http url="https://github.com/ec-europa/platform-dev/releases/download/${platform.package.reference}/platform-dev-${platform.package.reference}.tar.gz"/>
                    <then>
                        <exec command="curl -L -o ${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz https://github.com/ec-europa/platform-dev/releases/download/${platform.package.reference}/platform-dev-${platform.package.reference}.tar.gz" passthru="true"/>
                        <echo msg="Downloaded platform package reference ${platform.package.reference}"/>
                    </then>
                    <else>
                        <fail msg="Failed downloading platform package reference ${platform.package.reference}"/>
                    </else>
                </if>
            </else>
        </if>
    </target>

    <!-- Make the development version of the subsite. -->
    <target name="platform-make" depends="platform-package-unpack">
        <if>
            <available file="${subsite.make}" type="file" />
            <then>
                <echo msg="Make the subsite." />
                <phingcall target="drush-make-no-core">
                    <property name="drush.make.target.file" value="${subsite.make}" />
                    <property name="drush.make.root" value="${platform.build.dir}" />
                </phingcall>
            </then>
            <else>
                <echo msg="No make file found. Skipping..." />
            </else>
        </if>
    </target>

    <!-- Unpack the platform. -->
    <target name="platform-package-unpack" depends="platform-package-download">
        <!-- Use the faster native commands on UNIX systems. -->
        <if>
            <os family="unix"/>
            <then>
                <echo msg='mkdir "${platform.build.dir}"'/>
                <exec
                    command='mkdir "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                />
                <echo msg='tar xzf "${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" -C "${platform.build.dir}"'/>
                <exec
                    command='tar xzf "${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" -C "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
            </then>
            <else>
                <untar file="${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" todir="${platform.build.dir}"/>
            </else>
        </if>
    </target>

    <!-- Update .htaccess. -->
    <target name="platform-update-htaccess">
        <if>
            <istrue value="${drupal.htaccess.append.text}" />
            <then>
                <echo msg="Appended text to htaccess." />
                <append destfile="${drupal.htaccess.path}" text="${drupal.htaccess.append.text}" />
            </then>
            <else>
                <echo msg="Appended no text to htaccess." />
            </else>
        </if>
    </target>

</project>
