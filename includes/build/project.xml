<?xml version="1.0" encoding="UTF-8" ?>

<project default="help">

    <!-- Import helper targets if called here directly. -->
    <if>
         <available file="help.xml" />
         <then>
             <import file="help.xml" />
         </then>
     </if>

    <!-- Link site document root to Webserver document root. -->
    <target
        name="build-project-docroot"
        description="Create symlink from build to docroot.">
        <rel-sym link="${server.docroot}" target="${platform.build.dir}" overwrite="true" />
    </target>

    <!-- Delete the previous development build. -->
    <target name="project-platform-delete">
        <echo msg="Delete previous build." />
        <phingcall target="unprotect-folder">
            <property name="folder.to.unprotect" value="${platform.build.settings.dir}" />
        </phingcall>
        <echo msg="Unprotecting folder." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${platform.build.dir}" />
        </phingcall>
        <echo msg="Deleting folder." />
    </target>

    <!-- Download the platform. -->
    <target name="project-platform-package-download">
        <if>
            <available file="${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" type="file"/>
            <then>
                  <echo msg="Package platform-dev-${platform.package.reference}.tar.gz already downloaded."/>
            </then>
            <else>
                <!-- Create the destination directory if it doesn't exist. -->
                <mkdir dir="${platform.package.cachedir}" />
                <echo msg="Starting platform download. Depending on your connection this can take between 5-15 minutes. Go get some coffee."/>
                <if>
                    <http url="https://github.com/ec-europa/platform-dev/releases/download/${platform.package.reference}/platform-dev-${platform.package.reference}.tar.gz"/>
                    <then>
                        <exec command="curl -L -o ${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz https://github.com/ec-europa/platform-dev/releases/download/${platform.package.reference}/platform-dev-${platform.package.reference}.tar.gz" passthru="true"/>
                        <echo msg="Downloaded platform package reference ${platform.package.reference}"/>
                    </then>
                    <else>
                        <fail msg="Failed downloading platform package reference ${platform.package.reference}"/>
                    </else>
                </if>
            </else>
        </if>
    </target>

    <!-- Unpack the platform. -->
    <target name="project-platform-package-unpack" depends="project-platform-package-download">
        <!-- Use the faster native commands on UNIX systems. -->
        <if>
            <os family="unix"/>
            <then>
                <echo msg='mkdir "${platform.build.dir}"'/>
                <exec
                    command='mkdir "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                />
                <echo msg='tar xzf "${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" -C "${platform.build.dir}"'/>
                <exec
                    command='tar xzf "${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" -C "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
            </then>
            <else>
                <untar file="${platform.package.cachedir}/platform-dev-${platform.package.reference}.tar.gz" todir="${platform.build.dir}"/>
            </else>
        </if>
    </target>

    <!-- Install Composer dependencies without development dependencies. -->
    <target name="project-platform-composer-install">
        <echo msg="Run 'composer install' in platform root." />
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--no-dev" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Install Composer dependencies, including optional development dependencies. -->
    <target name="project-platform-composer-install-dev">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Install Composer dev dependencies for the subsite. -->
    <target name="project-subsite-composer-install">
        <echo msg="Run 'composer install' in the subsite folder for development purposes." />
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.subsite.dir}" />
            <arg value="--no-interaction" />
            <!-- <arg value="no-plugins" /> -->
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Setup file directory -->
    <target name="project-setup-files-directory">
        <if>
            <istrue value="${platform.build.files.dir}" />
            <then>
                <mkdir dir="${platform.build.files.dir}/private_files" />
                <mkdir dir="${platform.build.tmp.dir}" />
                <!-- Support CSS and JS injector. -->
                <mkdir dir="${platform.build.files.dir}/css_injector" />
                <mkdir dir="${platform.build.files.dir}/js_injector" />
            </then>
        </if>
    </target>

    <!-- Install the subsite. -->
    <target name="build-project-install" description="Install the subsite.">
        <!--
            Ensure the settings folder is writable so the installer can create
            the settings.php file.
         -->
        <chmod mode="0775" failonerror="false" verbose="false" quiet="true">
            <fileset dir="${platform.build.settings.dir}" />
        </chmod>

        <if>
            <and>
                <equals arg1="${platform.package.database}" arg2="1" />
                <available file="${share.platform.path}/databases/platform-dev-${platform.package.reference}/platform-dev-${platform.package.reference}.sql" type="file" />
            </and>
            <then>
                <phingcall target="drush-regenerate-settings" />
                <exec command="${drush.bin} --root=${platform.build.dir} status bootstrap | grep -q Successful" returnProperty="drush-status-bootstrap" />
                <if>
                    <not>
                        <equals arg1="${drush-status-bootstrap}" arg2="0"/>
                    </not>
                    <then>
                        <phingcall target="drush-sql-create" />
                        <phingcall target="drush-sql-import">
                            <property name="database-file" value="${share.platform.path}/databases/platform-dev-${platform.package.reference}/platform-dev-${platform.package.reference}.sql" />
                        </phingcall>
                    </then>
                </if> 
            </then>
            <else>
                <!-- Install site with drush. -->
                <phingcall target="drush-site-install" />
                <!-- Backup vanilla database. -->
                <if>
                    <equals arg1="${platform.package.database}" arg2="1" />
                    <then>
                        <phingcall target="drush-sql-dump">
                            <property name="database-file" value="${share.platform.path}/databases/platform-dev-${platform.package.reference}/platform-dev-${platform.package.reference}.sql" />
                        </phingcall>
                    </then>
                </if>
            </else>
        </if>

        <!-- Enable solr if needed. -->
        <phingcall target="drush-enable-solr" />

        <!--
            Subsites are not allowed to use their own installation profile for
            historical reasons. The functionality is contained in one of more
            features and modules which need to be enabled after installation.
        -->
        <phingcall target="subsite-modules-install-en" />

        <!-- Rebuild node access after Subsites modules activation -->
        <phingcall target="drush-rebuild-node-access" />
    </target>

</project>
