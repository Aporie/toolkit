<?xml version="1.0" encoding="UTF-8" ?>

<project name="Starterkit" default="help">

    <!-- Run Behat tests. -->
    <target name="test-run-behat" description="Refresh configuration and run behat tests.">
        <behat
            executable="${behat.bin}"
            config="${behat.yml.path}"
            strict="${behat.options.strict}"
            verbose="${behat.options.verbosity}"
            passthru="${behat.options.passthru}"
        />
    </target>

    <!-- Run a full static analysis with phpcs. -->
    <target
        name="test-run-phpcs"
        description="Refresh configuration and run phpcs review."
        depends="test-phpcs-setup, test-run-php-codesniffer"
    />

    <!-- Run a full static analysis qa console. -->
    <target
        name="test-run-qa"
        description="Refresh configuration and run qa review."
        depends="test-phpcs-setup, test-run-quality-assurance"
    />

    <!-- Do quality assurance checks. -->
    <target name="test-run-quality-assurance">
        <exec
            command="${subsite.starterkit.bin}/qa review:full --no-interaction --ansi"
            passthru="true"
            checkreturn="true"
        />
    </target>

    <!-- Do quality assurance checks. -->
    <target name="test-run-php-codesniffer">
        <exec
            command="${subsite.starterkit.bin}/phpcs"
            passthru="true"
            checkreturn="true"
        />
    </target>

    <!-- Install the subsite. -->
    <target name="install" description="Install the subsite.">
        <!--
            Ensure the settings folder is writable so the installer can create
            the settings.php file.
         -->
        <chmod mode="0775" failonerror="false" verbose="false" quiet="true">
            <fileset dir="${platform.build.settings.dir}" />
        </chmod>

        <if>
            <and>
                <equals arg1="${platform.package.database}" arg2="1" />
                <available file="${share.platform.path}/databases/platform-dev-${platform.package.reference}/platform-dev-${platform.package.reference}.sql" type="file" />
            </and>
            <then>
                <phingcall target="drush-regenerate-settings" />
                <exec command="${drush.bin} --root=${platform.build.dir} status bootstrap | grep -q Successful" returnProperty="drush-status-bootstrap" />
                <if>
                    <not>
                        <equals arg1="${drush-status-bootstrap}" arg2="0"/>
                    </not>
                    <then>
                        <phingcall target="drush-sql-create" />
                        <phingcall target="drush-sql-import">
                            <property name="database-file" value="${share.platform.path}/databases/platform-dev-${platform.package.reference}/platform-dev-${platform.package.reference}.sql" />
                        </phingcall>
                    </then>
                </if> 
            </then>
            <else>
                <!-- Install site with drush. -->
                <phingcall target="drush-site-install" />
                <!-- Backup vanilla database. -->
                <if>
                    <equals arg1="${platform.package.database}" arg2="1" />
                    <then>
                        <phingcall target="drush-sql-dump">
                            <property name="database-file" value="${share.platform.path}/databases/platform-dev-${platform.package.reference}/platform-dev-${platform.package.reference}.sql" />
                        </phingcall>
                    </then>
                </if>
            </else>
        </if>

        <!-- Enable solr if needed. -->
        <phingcall target="drush-enable-solr" />

        <!--
            Subsites are not allowed to use their own installation profile for
            historical reasons. The functionality is contained in one of more
            features and modules which need to be enabled after installation.
        -->
        <phingcall target="subsite-modules-install-en" />

        <!-- Rebuild node access after Subsites modules activation -->
        <phingcall target="drush-rebuild-node-access" />
    </target>

    <!-- Set up PHP CodeSniffer. -->
    <target name="test-phpcs-setup" depends="test-phpcs-setup-prepush">
        <delete file="${phpcs.config}" failonerror="false" />
        <delete file="${phpcs.global.config}" failonerror="false" />
        <phpcodesnifferconfiguration
            configFile="${phpcs.config}"
            extensions="${phpcs.extensions}"
            files="${phpcs.files}"
            globalConfig="${phpcs.global.config}"
            ignorePatterns="${phpcs.ignore}"
            passWarnings = "${phpcs.passwarnings}"
            reports="${phpcs.reports}"
            showProgress="${phpcs.progress}"
            showSniffCodes="${phpcs.sniffcodes}"
            standards="${phpcs.standards}"
            installedPaths="${phpcs.installed.paths}"
        />
    </target>

    <!-- Setup the PHP CodeSniffer pre-push hook. -->
    <target name="test-phpcs-setup-prepush">
        <if>
            <equals arg1="${phpcs.prepush.enable}" arg2="1" />
            <then>
                <echo message="Enabling git pre-push hook." />
                <mkdir dir="${project.basedir}/resources/git/hooks/pre-push"/>
                <rel-sym link="${phpcs.prepush.destination}" target="${phpcs.prepush.source}" overwrite="true" />
            </then>
           <else>
                <echo message="Disabling git pre-push hook." />
                <delete file="${phpcs.prepush.destination}" failonerror="false" quiet="true" />
          </else>
        </if>
    </target>

    <!-- Set up Behat. -->
    <target name="test-behat-setup">
        <if>
            <available file="${behat.yml.path}" type="file" property="behat.yml.available" />
            <then>
                <echo message="Deleting existing behat.yml configuration file" />
                <delete file="${behat.yml.path}" failonerror="false" />
            </then>
        </if>
        <echo message="Creating behat.yml configuration file" />
        <loadfile property="behat.yml.content" file="${behat.yml.template}">
            <filterchain>
                <replacetokens>
                    <token key="project.code.dir" value="${project.code.dir}" />
                    <token key="drupal.site.dir" value="${drupal.site.dir}" />
                    <token key="behat.base_url" value="${behat.base_url}" />
                    <token key="behat.formatter.name" value="${behat.formatter.name}" />
                </replacetokens>
            </filterchain>
        </loadfile>
        <echo message="${behat.yml.content}" file="${behat.yml.path}" />
    </target>

</project>
