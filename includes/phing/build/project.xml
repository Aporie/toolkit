<?xml version="1.0" encoding="UTF-8" ?>

<project default="help">

    <!-- Import helper targets if called here directly. -->
    <if>
         <available file="help.xml" />
         <then>
             <import file="help.xml" />
         </then>
    </if>

    <!-- Create code base. -->
    <target
        name="build-project-platform"
        description="Build NextEuropa Platform code without version control."
        depends="
             project-platform-delete,
             project-platform-package-unpack" />

    <!-- Create code base. -->
    <target
        name="build-project-subsite"
        description="Build NextEuropa Subsite code without version control.">
        <echo msg="TODO: subsite builds not yet developed." />
    </target>

    <!-- Als long as there's only one theme we don't need to name it. -->
    <target
        name="build-project-theme"
        description="Build EC Europa theme without version control."
        depends="
        theme-europa-download-extract,
        theme-europa-create-symlinks" />

    <!-- Als long as there's only one theme we don't need to name it. -->
    <target
        name="build-project-theme-dev"
        description="Build EC Europa theme with version control."
        depends="
            theme-europa-repo-clone,
            theme-europa-build" />

    <target
        name="build-project-clone"
        description="Install NextEuropa site with production data."
        depends="
            project-database-download,
            drush-regenerate-settings,
            project-database-import,
            project-modules-devel-en" />

    <!-- Link site document root to Webserver document root. -->
    <target
        name="build-project-docroot"
        description="Create symlink from build to docroot.">
        <rel-sym link="${project.docroot}" target="${project.build.platform.dir}" overwrite="true" />
    </target>

    <target name="project-build-set-dist">
        <echo msg="Setting build dir to ${project.build.dist.dir}." />
        <property name="dir-build" value="${project.build.dist.dir}" override="true" />
        <echo msg="Setting profile dir to to ${project.build.dist.dir.profile}." />
        <property name="dir-profile" value="${project.build.dist.dir.profile}" override="true" />
        <echo msg="Setting profiles dir to to ${project.build.dist.dir.profiles}." />
        <property name="dir-profiles" value="${project.build.dist.dir.profiles}" override="true" />
    </target>

    <target name="project-build-set-dev">
        <echo msg="Setting build dir to ${project.build.platform.dir}." />
        <property name="dir-build" value="${project.build.platform.dir}" override="true" />
        <echo msg="Setting profile dir to to ${project.build.platform.dir.profile}." />
        <property name="dir-profile" value="${project.build.platform.dir.profile}" override="true" />
        <echo msg="Setting profiles dir to to ${project.build.platform.dir.profiles}." />
        <property name="dir-profiles" value="${project.build.platform.dir.profiles}" override="true" />
    </target>

    <target name="project-profile-set">
        <echo msg="Setting profile name to ${platform.package.profile}." />
        <property name="profile-name" value="${platform.package.profile}" override="true" />
        <echo msg="Setting profile make to ${platform.package.profile.make}." />
        <property name="profile-make" value="${platform.package.profile.make}" override="true" />
    </target>

    <!-- Update .htaccess. -->
    <target name="build-project-htaccess" description="Update .htaccess file.">
        <if>
            <istrue value="${project.build.platform.htaccess.append.text}" />
            <then>
                <echo msg="Appended text to htaccess." />
                <append destfile="${project.build.platform.dir/.htaccess" text="${project.build.platform.htaccess.append.text}" />
            </then>
            <else>
                <echo msg="Appended no text to htaccess." />
            </else>
        </if>
    </target>

    <!-- Delete the previous development build. -->
    <target name="project-platform-delete">
        <echo msg="Delete previous build." />
        <phingcall target="unprotect-folder">
            <property name="folder.to.unprotect" value="${project.build.platform.dir.settings}" />
            <property name="folder.to.unprotect" value="${project.build.subsite.dir}" />
        </phingcall>
        <echo msg="Unprotecting folder." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${project.build.platform.dir}" />
        </phingcall>
    </target>

    <!-- Delete the previous development build. -->
    <target name="project-delete-build">
        <echo msg="Delete previous build." />
        <!--<phingcall target="unprotect-folder">-->
            <!--&lt;!&ndash; TODO fix &ndash;&gt;-->
            <!--<property name="folder.to.unprotect" value="${project.build.platform.dir.settings}" />-->
            <!--<property name="folder.to.unprotect" value="${project.build.subsite.dir}" />-->
        <!--</phingcall>-->
        <echo msg="Unprotecting folder." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${dir-build}" />
        </phingcall>
    </target>

    <!-- Unpack the platform. -->
    <target name="project-platform-package-unpack">
        <phingcall target="package-download-unpack">
            <property name="package-name" value="platform-dev-${platform.package.version.current}.tar.gz" />
            <property name="package-cache-location" value="${share.path.platform.packages.deploy}" />
            <property name="package-download-location" value="https://platform-ci.ne-dev.eu/releases" />
            <property name="package-extract-location" value="${project.build.platform.dir}" />
        </phingcall>
    </target>

    <!-- Install Composer dependencies without development dependencies. -->
    <target name="project-platform-composer-install">
        <echo msg="Run 'composer install' in platform root." />
        <composer command="install" composer="${project.bin.composer}">
            <arg value="--working-dir=${project.build.platform.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--no-dev" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Install Composer dependencies, including optional development dependencies. -->
    <target name="project-platform-composer-install-dev">
        <composer command="install" composer="${project.bin.composer}">
            <arg value="--working-dir=${project.build.platform.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Install Composer dev dependencies for the subsite. -->
    <target name="project-subsite-composer-install">
        <echo msg="Run 'composer install' in the subsite folder for development purposes." />
        <composer command="install" composer="${project.bin.composer}">
            <arg value="--working-dir=${project.build.subsite.dir}" />
            <arg value="--no-interaction" />
            <!-- <arg value="no-plugins" /> -->
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Install Composer dependencies without development dependencies. -->
    <target name="project-test-composer-install">
        <echo msg="Run 'composer install' in best folder." />
        <composer command="install" composer="${project.bin.composer}">
            <arg value="--working-dir=${project.resources.dir.tests}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Setup file directory -->
    <target name="project-setup-files-directory">
        <if>
            <istrue value="${project.build.subsite.dir.files}" />
            <then>
                <mkdir dir="${project.build.subsite.dir.files}/private_files" />
                <mkdir dir="${project.build.subsite.dir.tmp}" />
                <!-- Support CSS and JS injector. -->
                <mkdir dir="${project.build.subsite.dir.files}/css_injector" />
                <mkdir dir="${project.build.subsite.dir.files}/js_injector" />
            </then>
        </if>
    </target>

    <!-- Generate the makefile used to download development modules. -->
    <target name="project-modules-devel-mf">
        <echo msg="Generate the makefile for development modules." />
        <if>
            <available file="${project.tmp.devel.make}" type="file" property="devel.makefile.available" />
            <then>
                <echo message="Deleting existing makefile." />
                <delete file="${project.tmp.devel.make}" failonerror="false" />
            </then>
        </if>
        <drushmf
            makeFile="${project.tmp.devel.make}"
            coreVersion="${project.build.core}"
            projects="${devel.mdls.dl}"
            defaultProjectDir="${devel.mdls.dir}" />
    </target>
    <!-- Download development modules. -->
    <target name="project-modules-devel-dl" depends="project-modules-devel-mf">
        <echo msg="Download development modules." />
        <phingcall target="drush-make-no-core">
            <property name="drush.make.target.file" value="${project.tmp.devel.make}" />
            <property name="drush.make.root" value="${project.build.platform.dir}" />
        </phingcall>
    </target>

    <!-- Enable required modules after installation of the profile. -->
    <target name="project-modules-install-en">
        <phingcall target="drush-enable-modules">
            <property name="project.drupal.modules" value="${subsite.install.modules}" />
        </phingcall>
    </target>

    <!-- Enable development modules. -->
    <target name="project-modules-devel-en">
        <phingcall target="drush-enable-modules">
            <property name="project.drupal.modules" value="${devel.mdls.en}" />
        </phingcall>
    </target>

    <!-- Install the subsite. -->
    <target name="build-project-clean" description="Install NextEuropa site from scratch.">
         <mkdir dir="${project.build.subsite.dir}" />
         <phingcall target="drush-create-files-dirs" />
        <!--
            Ensure the settings folder is writable so the installer can create
            the settings.php file.
         -->
        <chmod mode="0775" failonerror="false" verbose="false" quiet="true">
            <fileset dir="${project.build.subsite.dir}" />
        </chmod>

        <if>
            <and>
                <equals arg1="${platform.package.database}" arg2="1" />
                <available file="${share.path.platform}/databases/platform-dev-${platform.package.version}/platform-dev-${platform.package.version}.sql" type="file" />
            </and>
            <then>
                <phingcall target="drush-regenerate-settings" />
                <exec command="${project.bin.drush} --root=${project.build.platform.dir} status bootstrap | grep -q Successful" returnProperty="drush-status-bootstrap" />
                <if>
                    <not>
                        <equals arg1="${drush-status-bootstrap}" arg2="0"/>
                    </not>
                    <then>
                        <phingcall target="drush-sql-create" />
                        <phingcall target="drush-sql-import">
                            <property name="database-file" value="${share.path.platform}/databases/platform-dev-${platform.package.version}/platform-dev-${platform.package.version}.sql" />
                        </phingcall>
                    </then>
                </if> 
            </then>
            <else>
                <!-- Install site with drush. -->
                <phingcall target="drush-site-install" />
                <!-- Backup vanilla database. -->
                <if>
                    <equals arg1="${platform.package.database}" arg2="1" />
                    <then>
                        <phingcall target="drush-sql-dump">
                            <property name="database-file" value="${share.path.platform}/databases/platform-dev-${platform.package.version}/platform-dev-${platform.package.version}.sql" />
                        </phingcall>
                    </then>
                </if>
            </else>
        </if>

        <!-- Enable solr if needed. -->
        <phingcall target="drush-enable-solr" />

        <!--
            Subsites are not allowed to use their own installation profile for
            historical reasons. The functionality is contained in one of more
            features and modules which need to be enabled after installation.
        -->
        <phingcall target="project-modules-install-en" />

        <!-- Rebuild node access after Subsites modules activation -->
        <phingcall target="drush-rebuild-node-access" />
    </target>

    <!-- Target to check if we have default settings, otherwise propose user to rebuild. -->
    <target name="check-for-default-settings-or-rebuild" hidden="true">
        <if>
            <not>
                <available file="${project.build.platform.dir.settings}/default.settings.php" type="file" property="project.build.settings.dir.default.settings" />
            </not>
            <then>
                <!-- If we can not find default settings in the build settings folder, prompt to ask user to rebuild. -->
                <echo msg="No default settings detected at ${project.build.platform.dir.settings}/default.settings.php." level="warning" />
                <propertyprompt propertyName="platform-rebuild" defaultValue="no" promptText="Do you wish to rebuild? (y/n)" />
                <if>
                    <equals arg1="${platform-rebuild}" arg2="y" />
                    <then>
                        <phingcall target="build-dev" />
                    </then>
                    <else>
                        <!-- If user chooses not to rebuild we have no other choice to fail the build. -->
                        <echo msg="Can not re-generate settings, canceling clone task." level="error" />
                        <fail />
                    </else>
                </if>
            </then>
            <else>
                <!-- If we have found the default settings inform the user we will proceed with generation. -->
                <echo msg="Default settings found at ${project.build.platform.dir.settings}/default.settings.php." />
                <echo msg="Proceeding with re-generation of the settings.php." />
            </else>
        </if>
        <phingcall target="project-modules-devel-en" />
    </target>

    <!-- Backs up files and folders listed in project.rebuild. properties in order to rebuild. -->
    <target name="subsite-site-backup">

        <!-- Check if site exists. -->
        <if>
            <available file="${project.build.subsite.dir}/settings.php" type="file"/>
            <then>
                <property name="site-detected" value="1" />
            </then>
            <else>
                <echo msg="No site installation detected. Skipping backup." />
            </else>
        </if>

        <if>
            <and>
                <equals arg1="${project.rebuild.auto}" arg2="0"/>
                <equals arg1="${site-detected}" arg2="1"/>
            </and>
            <then>
                <echo msg="Installed site detected." level="warning"/>
                <propertyprompt propertyName="subsite-site-backup-activated" promptText="Do you wish to backup site for this build? (y/n)" />
                <if>
                    <equals arg1="${subsite-site-backup-activated}" arg2="y" />
                    <then>
                        <property name="project.rebuild.auto" value="1" override="true"/>
                    </then>
                </if>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${project.rebuild.auto}" arg2="1"/>
                <equals arg1="${site-detected}" arg2="1"/>
            </and>
            <then>
                <if>
                    <!-- Delete any remains of previous backup attempts. -->
                    <available file="${project.rebuild.backup.destination}" type="dir"/>
                    <then>
                        <delete dir="${project.rebuild.backup.destination}" includeemptydirs="true"/>
                    </then>
                </if>
                <!-- Create backup directory. -->
                <mkdir dir="${project.rebuild.backup.destination}"/>
                <!-- Make the settings directory writable because we can not delete it otherwise -->
                <phingcall target="unprotect-folder">
                    <property name="folder.to.unprotect" value="${project.build.platform.dir.settings}" />
                    <property name="folder.to.unprotect" value="${project.build.subsite.dir}" />
                </phingcall>
                <!-- Back up folders list. -->
                <foreach list="${project.rebuild.backup.folders}" param="site-item" target="subsite-site-backup-item" delimiter=";">
                    <property name="site-item-type" value="dir"/>
                </foreach>
                <!-- Back up files list. -->
                <foreach list="${project.rebuild.backup.files}" param="site-item" target="subsite-site-backup-item" delimiter=";">
                    <property name="site-item-type" value="file"/>
                </foreach>
            </then>
        </if>
        <if>
            <equals arg1="${subsite-site-backup-activated}" arg2="y" />
            <then>
                <property name="project.rebuild.auto" value="0" override="true"/>
            </then>
        </if>
    </target>

    <!-- Restoring sites directory if backed up before rebuild-dev. -->
    <target name="subsite-site-restore">

        <!-- Check if backup exists. -->
        <if>
            <available file="${project.rebuild.backup.destination}" type="dir"/>
            <then>
                <property name="backup-detected" value="1" />
            </then>
            <else>
                <echo msg="No site backup detected. Skipping restore." />
            </else>
        </if>
        <if>
            <and>
                <equals arg1="${project.rebuild.auto}" arg2="0"/>
                <equals arg1="${backup-detected}" arg2="1"/>
            </and>
            <then>
                <echo msg="Site backup detected." level="warning"/>
                <propertyprompt propertyName="subsite-site-restore-activated" promptText="Do you wish to restore site for this build? (y/n)" />
                <if>
                    <equals arg1="${subsite-site-restore-activated}" arg2="y" />
                    <then>
                        <property name="project.rebuild.auto" value="1" override="true"/>
                    </then>
                </if>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${project.rebuild.auto}" arg2="1"/>
                <equals arg1="${backup-detected}" arg2="1"/>
            </and>
            <then>
                <echo msg="Restoring site files and folders from ${project.rebuild.backup.destination}"/>
                <!-- Restore folders list. -->
                <foreach list="${project.rebuild.backup.folders}" param="site-item" target="subsite-site-restore-item" delimiter=";">
                    <property name="site-item-type" value="dir"/>
                </foreach>
                <!-- Restore files list. -->
                <foreach list="${project.rebuild.backup.files}" param="site-item" target="subsite-site-restore-item" delimiter=";">
                    <property name="site-item-type" value="file"/>
                </foreach>
                <!-- Delete the site backup directory. -->
                <delete dir="${project.rebuild.backup.destination}" includeemptydirs="true"/>
            </then>
        </if>
    </target>

    <!-- Backs up a site item from the platform that will be removed in order to rebuild. -->
    <target name="subsite-site-backup-item" hidden="true">
        <php expression='dirname("${site-item}")' returnProperty="site-item-dir"/>
        <property name="site-item-backup-dir" value="${site-item-dir}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${project.build.platform.dir}" replace="${project.rebuild.backup.destination}" ignoreCase="false"/>
                </replaceregexp>
            </filterchain>
        </property>
        <if>
            <available file="${site-item}" type="${site-item-type}"/>
            <then>
                <if>
                    <not>
                        <available file="${site-item-backup-dir}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${site-item-backup-dir}"/>
                    </then>
                </if>
                <move file="${site-item}" todir="${site-item-backup-dir}" includeemptydirs="true"/>
            </then>
            <else>
                <php expression='ucwords("${site-item-type}")' returnProperty="site-item-type-capitalized"/>
                <echo msg="Skipping ${site-item}. ${site-item-type-capitalized} not found." level="warning"/>
            </else>
        </if>
    </target>

    <!-- Restores a site item from the project.rebuild.backup.destination to the new build. -->
    <target name="subsite-site-restore-item" hidden="true">
        <property name="site-item-backup" value="${site-item}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${project.build.platform.dir}" replace="${project.rebuild.backup.destination}" ignoreCase="false"/>
                </replaceregexp>
            </filterchain>
        </property>
        <if>
            <available file="${site-item-backup}" type="${site-item-type}"/>
            <then>
                <php expression='dirname("${site-item}")' returnProperty="site-item-dir"/>
                <if>
                    <not>
                        <available file="${site-item-dir}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${site-item-dir}"/>
                    </then>
                </if>
                <move file="${site-item-backup}" todir="${site-item-dir}" includeemptydirs="true"/>
            </then>
            <else>
                <php expression='ucwords("${site-item-type}")' returnProperty="site-item-type-capitalized"/>
                <echo msg="Skipping ${site-item}. ${site-item-type-capitalized} not found." level="warning"/>
            </else>
        </if>
    </target>

    <!-- Import production database. -->
    <target name="project-database-import" depends="project-database-download">
        <echo msg="Import production database." />
        <!-- Drop database, create if necessary and import the dump. -->
        <phingcall target="drush-sql-drop" />
        <phingcall target="drush-sql-create" />
        <phingcall target="drush-sql-import">
            <property name="database-file" value="tmp/${gunzipped.filename}" />
        </phingcall>
        <phingcall target="drush-registry-rebuild" />
    </target>

    <!-- Download the production database. -->
    <target name="project-database-download" >
        <echo msg="Download the production database." />
        <!--Strips gz suffix. -->
        <php expression="substr('${project.db.filename}', 0, -3)" returnProperty="gunzipped.filename" level="debug"/>
        <if>
            <not>
                <!-- Check if we have a previously downloaded dump available. -->
                <available file="tmp/${gunzipped.filename}" type="file" property="gunzipped.project.db" />
            </not>
            <then>
                <!-- If not available, download and unzip the file. -->
                <phingcall target="project-database-wget" />
                <exec command="gunzip tmp/${project.db.filename}" checkreturn="true" passthru="false" logoutput="true" />
            </then>
            <else>
                <!-- Inform user if file was already downloaded. -->
                <echo msg="File ${gunzipped.filename} already downloaded." />
                <echo msg="Proceeding to import." />
            </else>
        </if>
    </target>

    <!-- Target to actually fetch the database dump. -->
    <target name="project-database-wget">
        <!--Generate .htaccess credential property if needed, empty if not. -->
        <if>
            <or>
                <equals arg1="${project.db.url.htaccess.username}" arg2="" />
                <equals arg1="${project.db.url.htaccess.password}" arg2="" />
            </or>
            <then>
                <!-- If username or password is not provided, empty the credential string. -->
                <property name="project.db.url.credentials"  value="" override="true" />
            </then>
            <else>
                <!-- If username or password is provided, build the credential string. -->
                <property name="project.db.url.credentials"  value="${project.db.url.htaccess.username}:${project.db.url.htaccess.password}@" override="true"  />
            </else>
        </if>
        <!-- Attempt to download the database dump. -->
        <exec command="wget https://${project.db.url.credentials}${project.db.url}${project.db.filename}" dir="tmp" checkreturn="false" passthru="false" outputProperty="project.db.download" />
        <if>
            <!-- Upon success inform the user. -->
            <contains string="${project.db.download}" substring="200" />
            <then>
                <echo msg="Database successfully downloaded." />
            </then>
            <!-- When denied access, prompt the user for credentials and retry the download. -->
            <elseif>
                <contains string="${project.db.download}" substring="401" />
                <then>
                    <phingcall target="prompt-for-credentials-and-retry" />
                </then>
            </elseif>
            <!-- Otherwise we fail the build and display the download message. -->
            <else>
                <echo msg="Failed to download the database dump. Result of wget:" level="error" />
                <echo msg="${project.db.download}" level="error" />
                <fail />
            </else>
        </if>
    </target>

    <!-- Simple prompt for user credentials and recurse into project-database-wget. -->
    <target name="prompt-for-credentials-and-retry" hidden="true">
        <input propertyName="project.db.url.htaccess.username" message="Please enter your username." />
        <input hidden="true" propertyName="project.db.url.htaccess.password" message="Please enter your password." />
        <phingcall target="project-database-wget" />
    </target>

</project>
