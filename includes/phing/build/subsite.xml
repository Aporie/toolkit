<?xml version="1.0" encoding="UTF-8" ?>

<project default="help">

    <!-- Import helper targets if called here directly. -->
    <if>
         <available file="help.xml" />
         <then>
             <import file="help.xml" />
         </then>
     </if>

    <!-- Create code base. -->
    <target
        name="build-subsite-dev"
        description="Build local version of subsite without install."
        depends="
            project-subsite-backup,
            project-platform-version-set,
            project-build-set-dev,
            project-profile-set,
            subsite-resources-link,
            subsite-make-subsite,
            project-subsite-composer-install,
            project-modules-devel-dl,
            project-subsite-restore" />

    <!-- Create distribution code base. -->
    <target
        name="build-subsite-dist"
        description="Build files of subsite for release package."
        depends="
            project-build-set-dist,
            subsite-dist-delete,
            subsite-dist-make,
            subsite-dist-resources-copy,
            subsite-dist-composer-install" />

    <!-- Make the development version of the subsite. -->
    <target name="subsite-make-subsite">
        <echo msg="Make the subsite." />
        <phingcall target="drush-make-no-core">
            <property name="make-file" value="${project.resources.dir.site.make}" />
            <property name="make-folder" value="${project.build.platform.dir.sites}" />
            <property name="make-destination" value="${project.id}" />
        </phingcall>
    </target>

    <!-- Symlink the source folders for easy development. -->
    <target name="subsite-resources-link">
        <symlink-property-contents
            prefix="project.lib.dir."
            origindir="${project.lib.dir}"
            targetdir="${project.build.subsite.dir}"
            overwrite="true"
        />
    </target>

    <!-- Generate the makefile used to download development modules. -->
    <target name="project-modules-devel-mf">
        <echo msg="Generate the makefile for development modules." />
        <if>
            <available file="${project.tmp.devel.make}" type="file" property="devel.makefile.available" />
            <then>
                <echo message="Deleting existing makefile." />
                <delete file="${project.tmp.devel.make}" failonerror="false" />
            </then>
        </if>
        <drushmf
            makeFile="${project.tmp.devel.make}"
            coreVersion="${project.profile.core}"
            projects="${devel.mdls.dl}"
            defaultProjectDir="${devel.mdls.dir}"
        />
    </target>

    <!-- Build release package. -->
    <target name="build-subsite-dist-package" description="Build subsite source code release package." depends="build-subsite-dist">
        <mkdir dir="${project.release.path}" />
        <exec command="tar -czf ${project.release.path}/${project.release.name}.tar.gz ${project.build.dist}" />
    </target>

   <!-- Install Composer dist dependencies for the subsite. -->
    <target name="subsite-dist-composer-install">
        <echo msg="Run 'composer install --no-dev' in the build destination folder." />
        <composer command="install" composer="${project.bin.composer}">
            <arg value="--working-dir=${project.build.dist.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-plugins" />
            <arg value="--no-suggest" />
            <arg value="--no-dev" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Copy project.resources into the build folder. -->
    <target name="subsite-dist-resources-copy">
        <echo msg="Copy custom resources." />
        <!-- Copy our custom modules. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.lib.dir.modules}" />
            <property name="copy.destination.path" value="${project.build.dist.dir.modules.custom}" />
            <property name="project.build.haltonerror.dir.copy" value="false" override="true"/>
        </phingcall>
        <!-- Copy our custom features. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.lib.dir.modules.features}" />
            <property name="copy.destination.path" value="${project.build.dist.dir.modules.features}" />
            <property name="project.build.haltonerror.dir.copy" value="false" override="true"/>
        </phingcall>
        <!-- Copy our custom themes. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.lib.dir.themes}" />
            <property name="copy.destination.path" value="${project.build.dist.dir.themes}" />
            <property name="project.build.haltonerror.dir.copy" value="false" override="true"/>
        </phingcall>
        <!-- Copy our custom PSR-4 code. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.lib.dir.source}" />
            <property name="copy.destination.path" value="${project.build.dist.dir.source}" />
            <property name="project.build.haltonerror.dir.copy" value="false" override="true"/>
        </phingcall>
        <!-- Copy composer configuration. -->
        <copy todir="${project.build.dist.dir}" file="${project.resources.dir.composer.json}" />
        <copy todir="${project.build.dist.dir}" file="${project.resources.dir.composer.lock}" />
    </target>

    <!-- Delete the previous distribution build. -->
    <target name="subsite-dist-delete">
        <echo msg="Delete previous build." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${project.build.dist.dir}" />
        </phingcall>
    </target>

    <!-- Make the distribution version of the subsite. -->
    <target name="subsite-dist-make">
        <phingcall target="drush-make-no-core">
            <property name="make-file" value="${project.resources.dir.site.make}" />
            <property name="make-folder" value="${project.build.subsite.dir.modules}" />
        </phingcall>
    </target>

</project>
