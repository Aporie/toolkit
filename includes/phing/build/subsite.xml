<?xml version="1.0" encoding="UTF-8" ?>

<project default="help">

    <!-- Import helper targets if called here directly. -->
    <if>
         <available file="help.xml" />
         <then>
             <import file="help.xml" />
         </then>
     </if>

    <!-- Create code base. -->
    <target
        name="build-subsite-dev"
        description="Build local version of subsite without install."
        depends="
            subsite-site-backup,
            build-project-platform,
            subsite-make-subsite,
            subsite-resources-link,
            project-subsite-composer-install,
            test-behat-setup-link,
            test-behat-setup,
            build-project-htaccess,
            test-phpcs-setup,
            project-modules-devel-dl,
            subsite-site-restore" />

    <!-- Create distribution code base. -->
    <target
        name="build-subsite-dist"
        description="Build files of subsite for release package."
        depends="
            subsite-dist-delete,
            subsite-dist-make,
            subsite-dist-resources-copy,
            subsite-dist-composer-install" />

    <!-- Build code base with backup restore. -->
    <target name="build-project-rebuild-platform" description="Rebuild NextEuropa Platform code while keeping subsite.">
        <!-- Execute build-dev with automatic rebuild enabled. -->
        <phingcall target="build-subsite-dev">
            <property name="project.rebuild.auto" value="1" override="true"/>
        </phingcall>
    </target>

    <!-- Build code base with backup restore. -->
    <target name="build-project-rebuild-subsite" description="Rebuild NextEuropa Subsite code while keeping platform.">
        <!-- TODO when subsite packages are available. -->
    </target>

    <!-- Make the development version of the subsite. -->
    <target name="subsite-make-subsite">
        <if>
            <available file="${site.make}" type="file" />
            <then>
                <echo msg="Make the subsite." />
                <phingcall target="drush-make-no-core">
                    <property name="drush.make.target.file" value="${site.make}" />
                    <property name="drush.make.root" value="${project.build.platform.dir}" />
                </phingcall>
            </then>
            <else>
                <echo msg="No make file found. Skipping..." />
            </else>
        </if>
    </target>

    <!-- Symlink the source folders for easy development. -->
    <target name="subsite-resources-link">
        <rel-sym link="${project.build.subsite.dir.modules.custom}" target="${project.resources.dir.modules}" />
        <rel-sym link="${project.build.subsite.dir.modules.features}" target="${project.resources.dir.features}" />
        <delete dir="${project.build.subsite.dir.themes}" includeemptydirs="true" failonerror="false" />
        <rel-sym link="${project.build.subsite.dir.themes}" target="${project.resources.dir.themes}" />
        <rel-sym link="${project.build.subsite.dir.source}" target="${project.resources.dir.source}" />
        <rel-sym link="${project.build.subsite.composer.json}" target="${project.resources.composer.json}" />
        <rel-sym link="${project.build.subsite.composer.lock}" target="${project.resources.composer.lock}" />
    </target>

    <!-- Generate the makefile used to download development modules. -->
    <target name="project-modules-devel-mf">
        <echo msg="Generate the makefile for development modules." />
        <if>
            <available file="${project.tmp.devel.make}" type="file" property="devel.makefile.available" />
            <then>
                <echo message="Deleting existing makefile." />
                <delete file="${project.tmp.devel.make}" failonerror="false" />
            </then>
        </if>
        <drushmf
            makeFile="${project.tmp.devel.make}"
            coreVersion="${drupal.core.version}"
            projects="${devel.mdls.download}"
            defaultProjectDir="${devel.mdls.dir}"
        />
    </target>

    <!-- Build release package. -->
    <target name="build-subsite-dist-package" description="Build subsite source code release package." depends="build-subsite-dist">
        <mkdir dir="${project.release.path}" />
        <exec command="tar -czf ${project.release.path}/${project.release.name}.tar.gz ${phing.subsite.build.dir}" />
    </target>

   <!-- Install Composer dist dependencies for the subsite. -->
    <target name="subsite-dist-composer-install">
        <echo msg="Run 'composer install --no-dev' in the build destination folder." />
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.build.dist.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-plugins" />
            <arg value="--no-suggest" />
            <arg value="--no-dev" />
            <arg value="--ansi" />
        </composer>
    </target>

    <!-- Copy project.resources into the build folder. -->
    <target name="subsite-dist-resources-copy">
        <echo msg="Copy custom resources." />
        <!-- Copy our custom modules. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.resources.dir.modules}" />
            <property name="copy.destination.path" value="${project.build.dist.modules.custom.dir}" />
            <property name="copy.path.haltonerror" value="false" override="true"/>
        </phingcall>
        <!-- Copy our custom features. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.resources.dir.features}" />
            <property name="copy.destination.path" value="${project.build.dist.modules.features.dir}" />
            <property name="copy.path.haltonerror" value="false" override="true"/>
        </phingcall>
        <!-- Copy our custom themes. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.resources.dir.themes}" />
            <property name="copy.destination.path" value="${project.build.dist.themes.dir}" />
            <property name="copy.path.haltonerror" value="false" override="true"/>
        </phingcall>
        <!-- Copy our custom PSR-4 code. -->
        <phingcall target="copy-folder">
            <property name="copy.source.path" value="${project.resources.dir.source}" />
            <property name="copy.destination.path" value="${project.build.dist.source.dir}" />
            <property name="copy.path.haltonerror" value="false" override="true"/>
        </phingcall>
        <!-- Copy composer configuration. -->
        <copy todir="${project.build.dist.dir}" file="${project.resources.composer.json}" />
        <copy todir="${project.build.dist.dir}" file="${project.resources.composer.lock}" />
    </target>

    <!-- Delete the previous distribution build. -->
    <target name="subsite-dist-delete">
        <echo msg="Delete previous build." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${project.build.dist.dir}" />
        </phingcall>
    </target>

    <!-- Make the distribution version of the subsite. -->
    <target name="subsite-dist-make">
        <echo msg="Delete temporary build folder." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${project.tmp.dir}/build" />
        </phingcall>

        <echo msg="Make the subsite." />
        <!--
            Drush make builds the site as if it is part of a complete Drupal
            installation. The actual build is in the /sites/all subfolder. Build
            in a temporary folder and move the subsite into place when done.
         -->
        <if>
            <available file="${site.make}" type="file" />
            <then>
                <loadfile property="sitemake" file="${site.make}"/>
                <propertyregex
                    property="not.empty"
                    subject="${sitemake}"
                    pattern="([^#; ])(libraries\[|projects\[)"
                    match="$1"
                    casesensitive="false"
                    defaultvalue="empty"/>
                <if>
                    <not><equals arg1="${not.empty}" arg2="empty" /></not>
                    <then>
                        <phingcall target="drush-make-no-core">
                            <property name="drush.make.target.file" value="${site.make}" />
                            <property name="drush.make.root" value="${project.tmp.dir}/build" />
                        </phingcall>
                    </then>
                    <else>
                       <echo msg="Empty make file found. Skipping... ${not.empty}" />
                       <mkdir dir="${project.tmp.dir}/build/sites/all" />
                    </else>
                </if>
            </then>
            <else>
                <echo msg="No make file found. Skipping..." />
                <mkdir dir="${project.tmp.dir}/build/sites/all" />
            </else>
        </if>

        <!-- Move the subsite to its destination. -->
        <echo msg='mv "${project.tmp.dir}/build/sites/all/" "${project.build.dist.dir}"' />
        <exec
            command='mv "${project.tmp.dir}/build/sites/all/" "${project.build.dist.dir}"'
            dir="${project.basedir}"
            passthru="true"
            checkreturn="true"
        />

        <echo msg="Clean up temporary build folder." />
        <phingcall target="delete-folder">
            <property name="folder.to.delete" value="${project.tmp.dir}/build" />
        </phingcall>
    </target>

</project>
