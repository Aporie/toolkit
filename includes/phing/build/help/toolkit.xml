<?xml version="1.0" encoding="UTF-8" ?>

<project name="toolkit" description="Targets related to setup and configuration of the toolkit." default="">

    <target
        name="toolkit-initialize"
        description="Initializes a project for use of the toolkit."
        depends="
            toolkit-link-binary,
            toolkit-generate-structure,
            project-platform-set-version">
        <echo msg="Starterkit successfully initiated." />
    </target>

    <!-- Provide handy access with root symlink to starterkit binary. -->
    <target name="toolkit-link-binary" description="Provide project with toolkit binary at root level.">
        <echo msg="Provide project with starterkit binary at root level." />
        <relsym link="${project.basedir}/ssk" target="${toolkit.dir.bin}" overwrite="true" />
    </target>

    <!-- Ask user if he or she wants to generate the source code structure. -->
    <target name="toolkit-generate-structure" description="Create the lib directory structure.">
        <if>
            <and>
                <not>
                    <available file="${lib.dir}" type="dir" />
                </not>
                <!-- <equals arg1="${project.basedir}" arg2="${toolkit.dir}" /> -->
            </and>
            <then>
                <phingcall target="toolkit-copy-templates">
                    <property name="project-type" value="${project.type}" override="true" />
                </phingcall>
            </then>
            <elseif>
                <available file="${lib.dir}" type="dir" />
                <then>
                    <echo msg="Project structure exists already." />
                </then>
            </elseif>
            <else>
                <input propertyName="project-type" message="What type of project do you want to create?" validargs="profile,subsite" />
                <phingcall target="toolkit-copy-templates">
                    <property name="project-type" value="${project-type}" override="true" />
                </phingcall>
            </else>
        </if>
    </target>

    <target name="toolkit-generate-docs" description="Generate documentation md files for toolkit.">
        <docgen buildfile="${project.basedir}/vendor/ec-europa/ssk/build.xml" />
    </target>

    <!-- Ensure needed files are present. -->
    <target name="toolkit-copy-templates" description="Copies template files to your project for toolkit integration.">
        <echo msg="Ensuring the presence of build.xml and Jenkinsfile." />
        <copy file="${toolkit.dir.incl.phing.props}/main.props" tofile="${project.basedir}/build.properties.dist" overwrite="true" />
        <copy todir="${project.basedir}">
            <fileset dir="${toolkit.dir.incl.templates}/${project-type}" />
        </copy>
        <echo msg="Project structure for ${project-type} created." />
    </target>

    <!-- Upgrade ssk 2.x to 3.x. -->
    <target name="toolkit-upgrade-starterkit" description="Perform upgrade tasks for upgrading from 2.x to 3.x.">
        <if>
            <available file="${project.basedir}/build.package.xml" type="file" />
            <then>
                <input propertyName="toolkit-upgrade" message="Subsite Starterkit 2.x detected. Do you wish to upgrade to 3.x?" validargs="y,n" />
                <if>
                    <equals arg1="${toolkit-upgrade}" arg2="y" />
                    <then>
                        <!-- Delete starterkit folders. -->
                        <phingcall target="folder-delete">
                            <property name="folder.to.delete" value="${project.basedir}/bin" />
                        </phingcall>
                        <phingcall target="folder-delete">
                            <property name="folder.to.delete" value="${project.basedir}/docs" />
                        </phingcall>
                        <phingcall target="folder-delete">
                            <property name="folder.to.delete" value="${project.basedir}/src" />
                        </phingcall>
                        <phingcall target="folder-delete">
                            <property name="folder.to.delete" value="${resources.dir}/cloudformation" />
                        </phingcall>
                        <phingcall target="folder-delete">
                            <property name="folder.to.delete" value="${resources.dir}/codedeploy" />
                        </phingcall>
                        <phingcall target="folder-delete">
                            <property name="folder.to.delete" value="${resources.dir}/composer" />
                        </phingcall>
                        <!-- Delete starterkit files. -->
                        <delete quiet="true">
                            <fileset dir="${project.basedir}">
                                <include name="CHANGELOG.md" />
                                <include name="LICENSE.md" />
                                <include name="README.md" />
                                <include name="appspec.yml" />
                                <include name="build.clone.xml" />
                                <include name="build.package.xml" />
                                <include name="build.properties.dist" />
                                <include name="build.test.xml" />
                                <include name="composer.lock" />
                                <include name="phpcs-ruleset.xml" />
                            </fileset>
                        </delete>
                        <!-- Move subsite resources to new location. -->
                        <move file="${resources.dir}/phpcs-custom.xml" tofile="phpcs-ruleset.xml" overwrite="true" haltonerror="false" />
                        <move file="${resources.dir}/build.custom.xml" tofile="build.project.xml" overwrite="true" haltonerror="false" />

                        <move file="${lib.dir}" tofile="lib-backup" />
                        <mkdir dir="${lib.dir.libraries}" />
                        <mkdir dir="${lib.dir.modules.custom}" />
                        <mkdir dir="${lib.dir.modules.features}" />
                        <mkdir dir="${lib.dir.themes}" />
                        <mkdir dir="${lib.dir.source}" />
                        <if>
                            <available file="lib-backup/modules/custom" type="dir" />
                            <then>
                                <copy todir="${lib.dir.modules.custom}" haltonerror="false">
                                    <fileset dir="lib-backup/modules/custom">
                                        <include name="**" />
                                    </fileset>
                                </copy>
                                <delete dir="lib-backup/modules/custom" quiet="true" />
                                <copy todir="${lib.dir.modules.custom}" haltonerror="false">
                                    <fileset dir="lib-backup/modules">
                                        <include name="**" />
                                    </fileset>
                                </copy>
                                <delete dir="lib-backup/modules" quiet="true" />
                                <copy todir="${lib.dir.modules.features}" haltonerror="false">
                                    <fileset dir="lib-backup/features/custom">
                                        <include name="**" />
                                    </fileset>
                                </copy>
                                <delete dir="lib-backup/features/custom" quiet="true" />
                                <copy todir="${lib.dir.modules.features}" haltonerror="false">
                                    <fileset dir="lib-backup/features">
                                        <include name="**" />
                                    </fileset>
                                </copy>
                                <delete dir="lib-backup/features" quiet="true" />
                                <copy todir="${lib.dir.themes}" haltonerror="false">
                                    <fileset dir="lib-backup/themes">
                                        <include name="**" />
                                    </fileset>
                                </copy>
                                <delete dir="lib-backup/themes" quiet="true" />
                                <copy todir="${lib.dir.libraries}" haltonerror="false">
                                    <fileset dir="lib-backup/libraries">
                                        <include name="**" />
                                    </fileset>
                                </copy>
                                <delete dir="lib-backup/libraries" quiet="true" />
                                <copy todir="${lib.dir.source}" haltonerror="false">
                                    <fileset dir="lib-backup/src">
                                        <include name="**" />
                                    </fileset>
                                </copy>
                                <delete dir="lib-backup/src" quiet="true" />
                            </then>
                        </if>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <!-- Echo the composer hook phingcalls. -->
    <target name="toolkit-composer-hook-phingcalls" description="Echo the composer hook phing targets for use in bash script." hidden="true">
        <echoproperties prefix="composer.hook." />
    </target>

    <!-- Echo the git hook phingcalls. -->
    <target name="toolkit-git-hook-phingcalls" description="Echo the git hook phing targets for use in bash script." hidden="true">
        <echoproperties prefix="git.hook." />
    </target>

</project>
